version: '3'

vars:
  # careful here as these can conflict with the variables
  # defined in generator/Taskfile.yml when included in ./Taskfile.yml
  GENERATED_APP: k8sinfra-controller

  ROOT_DIR:
    sh: git rev-parse --show-toplevel

  GENERATED_GO_DIRS:
    sh: cd {{.ROOT_DIR}}/hack/generated && go list -f '{{"{{.Dir}}"}}' ./... 

  GENERATED_GO_DIRS_TO_TEST:
    # We exclude the apis folder because it's really large
    # and test discovery takes a good amount of time (>10s)
    sh: cd {{.ROOT_DIR}}/hack/generated && go list -f '{{"{{.Dir}}"}}' ./...  | grep -vE '/apis(/|$)'

env:
  KIND_CLUSTER_NAME: k8sinfra-generated

tasks:
  # Note: test-int can be run manually but is not included here so as to avoid slow
  # tests bogging down the dev cycle
  default:
    desc: Perform all local pre-commit tasks.
    deps: [generate-crds, header-check, lint, format-code, test]
  
  # There is a ci specific target because we want the CI pass to fail if
  # the code has not been go fmt-ed, whereas locally we want "task (default)"
  # to just format the code for you
  ci:
    # no description as it is not for local use
    # order must be explicit as CRDs must be generated before header check
    cmds:
    - task: generate-crds
    - task: ci-rest

  ci-rest:
    # these can all be run in parallel
    deps: [header-check, lint, test-cover, test-integration-envtest]

  lint:
    desc: Run lint checks.
    cmds: 
    - golangci-lint run -v {{.GENERATED_GO_DIRS_TO_TEST|catLines}}

  lint-full:
    desc: Run all lint checks.
    cmds: [golangci-lint run -v --fast=false]

  format-code:
    desc: Ensure all code is correctly formatted.
    cmds:
    - gofmt -l -s -w {{.GENERATED_GO_DIRS_TO_TEST|catLines}}

  tidy:
    desc: Run 'go mod tidy'.
    cmds: [go mod tidy]

  generate-crds:
    desc: Run controller-gen to generate CRD files.
    cmds:
    - find ./apis -type f -name "zz_generated.*" -delete
    - controller-gen object:headerFile=../boilerplate.go.txt paths="./..."
    - if [ -d "./config/crd/bases" ]; then find "./config/crd/bases" -type f -delete; fi
    - controller-gen {{.CRD_OPTIONS}} rbac:roleName=manager-role webhook paths="./..." output:crd:artifacts:config=config/crd/bases
    vars:
      CRD_OPTIONS: "crd:crdVersions=v1,allowDangerousTypes=true"
  
  build:
    desc: Generate the {{.GENERATED_APP}} binary.
    deps: [tidy, lint]
    cmds:
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GO111MODULE=on go build -o ./bin/{{.GENERATED_APP}}

  test:
    desc: Run unit tests.
    cmds:
    - go test {{.GENERATED_GO_DIRS_TO_TEST|catLines}} -short -tags=noexit

  test-cover:
    desc: Run unit tests and output coverage.
    cmds: 
    - go test -short -tags=noexit -race -covermode atomic -coverprofile=cover.out -coverpkg="./..." {{.GENERATED_GO_DIRS_TO_TEST|catLines}}
    - gcov2lcov -infile cover.out -outfile coverage.lcov

  test-integration-envtest:
    desc: Run integration tests with envtest and output coverage.
    cmds:
    # copy CRD files that are needed to a different folder, at the moment we cannot load all CRD files
    - mkdir -p config/crd/bases/valid
    - cp config/crd/bases/microsoft.batch.infra.azure.com_batchaccounts.yaml config/crd/bases/valid
    - cp config/crd/bases/microsoft.storage.infra.azure.com_storageaccounts.yaml config/crd/bases/valid
    - cp config/crd/bases/microsoft.resources.infra.azure.com_resourcegroups.yaml config/crd/bases/valid
    # -race fails at the moment in controller-runtime
    - go test -covermode atomic -coverprofile=cover-integration-envtest.out -coverpkg="./..." ./controllers/... -envtest  -v
    - gcov2lcov -infile cover-integration-envtest.out -outfile coverage-integration-envtest.lcov
  
  cleanup-azure-resources:
    desc: Removes any old resources created by tests.
    # This finds all resource groups which match the specified pattern (k8sinfratest)
    # and are older than a day (86400 seconds). This is a bit horrible but it works...
    cmds:
      - |
        rgs=`az group list --query '[*].{Name: name, CreatedAt: tags.CreatedAt}' \
          | jq -r '.[] | select(.Name | test("^k8sinfratest")) | select(.CreatedAt == null or now-(.CreatedAt | fromdate) > 86400) | .Name'`; \
        for rgname in ${rgs[@]} ; do \
          echo "$rgname will be deleted"; \
          az group delete --name $rgname --no-wait --yes; \
        done

  header-check:
    desc: Ensure all files have an appropriate license header.
    cmds:
    - "{{.ROOT_DIR}}/scripts/verify_boilerplate.sh"
