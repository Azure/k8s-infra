// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20150501preview

import (
	"fmt"
	"github.com/Azure/k8s-infra/hack/generated/apis/deploymenttemplate/v20150101"
	"github.com/Azure/k8s-infra/hack/generated/pkg/genruntime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
type ServersDatabasesSyncGroups struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServersDatabasesSyncGroups_Spec `json:"spec,omitempty"`
	Status            SyncGroup_Status                `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type ServersDatabasesSyncGroupsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServersDatabasesSyncGroups `json:"items"`
}

type ServersDatabasesSyncGroups_Spec struct {
	ForProvider ServersDatabasesSyncGroupsParameters `json:"forProvider"`
}

//Generated from:
type SyncGroup_Status struct {

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//Properties: Resource properties.
	Properties *SyncGroupProperties_Status `json:"properties,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

type ServersDatabasesSyncGroupsParameters struct {

	// +kubebuilder:validation:Required
	//ApiVersion: API Version of the resource type, optional when apiProfile is used
	//on the template
	ApiVersion ServersDatabasesSyncGroupsSpecApiVersion `json:"apiVersion"`
	Comments   *string                                  `json:"comments,omitempty"`

	//Condition: Condition of the resource
	Condition *bool                   `json:"condition,omitempty"`
	Copy      *v20150101.ResourceCopy `json:"copy,omitempty"`

	//DependsOn: Collection of resources this resource depends on
	DependsOn []string `json:"dependsOn,omitempty"`

	//Location: Location to deploy resource to
	Location *v20150101.ResourceLocations `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the resource
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Properties: Properties of a sync group.
	Properties SyncGroupProperties `json:"properties"`

	//Scope: Scope for the resource or deployment. Today, this works for two cases: 1)
	//setting the scope for extension resources 2) deploying resources to the tenant
	//scope in non-tenant scope deployments
	Scope *string `json:"scope,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// +kubebuilder:validation:Required
	//Type: Resource type
	Type ServersDatabasesSyncGroupsSpecType `json:"type"`
}

//Generated from:
type SyncGroupProperties_Status struct {

	//ConflictResolutionPolicy: Conflict resolution policy of the sync group.
	ConflictResolutionPolicy *SyncGroupPropertiesStatusConflictResolutionPolicy `json:"conflictResolutionPolicy,omitempty"`

	//HubDatabasePassword: Password for the sync group hub database credential.
	HubDatabasePassword *string `json:"hubDatabasePassword,omitempty"`

	//HubDatabaseUserName: User name for the sync group hub database credential.
	HubDatabaseUserName *string `json:"hubDatabaseUserName,omitempty"`

	//Interval: Sync interval of the sync group.
	Interval *int `json:"interval,omitempty"`

	//LastSyncTime: Last sync time of the sync group.
	LastSyncTime *string `json:"lastSyncTime,omitempty"`

	//Schema: Sync schema of the sync group.
	Schema *SyncGroupSchema_Status `json:"schema,omitempty"`

	//SyncDatabaseId: ARM resource id of the sync database in the sync group.
	SyncDatabaseId *string `json:"syncDatabaseId,omitempty"`

	//SyncState: Sync state of the sync group.
	SyncState *SyncGroupPropertiesStatusSyncState `json:"syncState,omitempty"`
}

// +kubebuilder:validation:Enum={"2015-05-01-preview"}
type ServersDatabasesSyncGroupsSpecApiVersion string

const ServersDatabasesSyncGroupsSpecApiVersion20150501Preview = ServersDatabasesSyncGroupsSpecApiVersion("2015-05-01-preview")

// +kubebuilder:validation:Enum={"Microsoft.Sql/servers/databases/syncGroups"}
type ServersDatabasesSyncGroupsSpecType string

const ServersDatabasesSyncGroupsSpecTypeMicrosoftSqlServersDatabasesSyncGroups = ServersDatabasesSyncGroupsSpecType("Microsoft.Sql/servers/databases/syncGroups")

//Generated from: https://schema.management.azure.com/schemas/2015-05-01-preview/Microsoft.Sql.json#/definitions/SyncGroupProperties
type SyncGroupProperties struct {

	//ConflictResolutionPolicy: Conflict resolution policy of the sync group.
	ConflictResolutionPolicy *SyncGroupPropertiesConflictResolutionPolicy `json:"conflictResolutionPolicy,omitempty"`

	//HubDatabasePassword: Password for the sync group hub database credential.
	HubDatabasePassword *string `json:"hubDatabasePassword,omitempty"`

	//HubDatabaseUserName: User name for the sync group hub database credential.
	HubDatabaseUserName *string `json:"hubDatabaseUserName,omitempty"`

	//Interval: Sync interval of the sync group.
	Interval *int `json:"interval,omitempty"`

	//Schema: Properties of sync group schema.
	Schema *SyncGroupSchema `json:"schema,omitempty"`

	//SyncDatabaseId: ARM resource id of the sync database in the sync group.
	SyncDatabaseId *string `json:"syncDatabaseId,omitempty"`
}

// +kubebuilder:validation:Enum={"HubWin","MemberWin"}
type SyncGroupPropertiesStatusConflictResolutionPolicy string

const (
	SyncGroupPropertiesStatusConflictResolutionPolicyHubWin    = SyncGroupPropertiesStatusConflictResolutionPolicy("HubWin")
	SyncGroupPropertiesStatusConflictResolutionPolicyMemberWin = SyncGroupPropertiesStatusConflictResolutionPolicy("MemberWin")
)

// +kubebuilder:validation:Enum={"Error","Good","NotReady","Progressing","Warning"}
type SyncGroupPropertiesStatusSyncState string

const (
	SyncGroupPropertiesStatusSyncStateError       = SyncGroupPropertiesStatusSyncState("Error")
	SyncGroupPropertiesStatusSyncStateGood        = SyncGroupPropertiesStatusSyncState("Good")
	SyncGroupPropertiesStatusSyncStateNotReady    = SyncGroupPropertiesStatusSyncState("NotReady")
	SyncGroupPropertiesStatusSyncStateProgressing = SyncGroupPropertiesStatusSyncState("Progressing")
	SyncGroupPropertiesStatusSyncStateWarning     = SyncGroupPropertiesStatusSyncState("Warning")
)

//Generated from:
type SyncGroupSchema_Status struct {

	//MasterSyncMemberName: Name of master sync member where the schema is from.
	MasterSyncMemberName *string `json:"masterSyncMemberName,omitempty"`

	//Tables: List of tables in sync group schema.
	Tables []SyncGroupSchemaTable_Status `json:"tables,omitempty"`
}

// +kubebuilder:validation:Enum={"HubWin","MemberWin"}
type SyncGroupPropertiesConflictResolutionPolicy string

const (
	SyncGroupPropertiesConflictResolutionPolicyHubWin    = SyncGroupPropertiesConflictResolutionPolicy("HubWin")
	SyncGroupPropertiesConflictResolutionPolicyMemberWin = SyncGroupPropertiesConflictResolutionPolicy("MemberWin")
)

//Generated from: https://schema.management.azure.com/schemas/2015-05-01-preview/Microsoft.Sql.json#/definitions/SyncGroupSchema
type SyncGroupSchema struct {

	//MasterSyncMemberName: Name of master sync member where the schema is from.
	MasterSyncMemberName *string `json:"masterSyncMemberName,omitempty"`

	//Tables: List of tables in sync group schema.
	Tables []SyncGroupSchemaTable `json:"tables,omitempty"`
}

//Generated from:
type SyncGroupSchemaTable_Status struct {

	//Columns: List of columns in sync group schema.
	Columns []SyncGroupSchemaTableColumn_Status `json:"columns,omitempty"`

	//QuotedName: Quoted name of sync group schema table.
	QuotedName *string `json:"quotedName,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2015-05-01-preview/Microsoft.Sql.json#/definitions/SyncGroupSchemaTable
type SyncGroupSchemaTable struct {

	//Columns: List of columns in sync group schema.
	Columns []SyncGroupSchemaTableColumn `json:"columns,omitempty"`

	//QuotedName: Quoted name of sync group schema table.
	QuotedName *string `json:"quotedName,omitempty"`
}

//Generated from:
type SyncGroupSchemaTableColumn_Status struct {

	//DataSize: Data size of the column.
	DataSize *string `json:"dataSize,omitempty"`

	//DataType: Data type of the column.
	DataType *string `json:"dataType,omitempty"`

	//QuotedName: Quoted name of sync group table column.
	QuotedName *string `json:"quotedName,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2015-05-01-preview/Microsoft.Sql.json#/definitions/SyncGroupSchemaTableColumn
type SyncGroupSchemaTableColumn struct {

	//DataSize: Data size of the column.
	DataSize *string `json:"dataSize,omitempty"`

	//DataType: Data type of the column.
	DataType *string `json:"dataType,omitempty"`

	//QuotedName: Quoted name of sync group table column.
	QuotedName *string `json:"quotedName,omitempty"`
}

func init() {
	SchemeBuilder.Register(&ServersDatabasesSyncGroups{}, &ServersDatabasesSyncGroupsList{})
}
