// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20150501preview

import (
	"fmt"
	"github.com/Azure/k8s-infra/hack/generated/apis/deploymenttemplate/v20150101"
	"github.com/Azure/k8s-infra/hack/generated/pkg/genruntime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
type ServersKeys struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServersKeys_Spec `json:"spec,omitempty"`
	Status            ServerKey_Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type ServersKeysList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServersKeys `json:"items"`
}

type ServerKey_Status struct {
	AtProvider ServersKeysObservation `json:"atProvider"`
}

type ServersKeys_Spec struct {
	ForProvider ServersKeysParameters `json:"forProvider"`
}

type ServersKeysObservation struct {

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Kind: Kind of encryption protector. This is metadata used for the Azure portal
	//experience.
	Kind *string `json:"kind,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//Properties: Resource properties.
	Properties *ServerKeyProperties_Status `json:"properties,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

type ServersKeysParameters struct {

	// +kubebuilder:validation:Required
	//ApiVersion: API Version of the resource type, optional when apiProfile is used
	//on the template
	ApiVersion ServersKeysSpecApiVersion `json:"apiVersion"`
	Comments   *string                   `json:"comments,omitempty"`

	//Condition: Condition of the resource
	Condition *bool                   `json:"condition,omitempty"`
	Copy      *v20150101.ResourceCopy `json:"copy,omitempty"`

	//DependsOn: Collection of resources this resource depends on
	DependsOn []string `json:"dependsOn,omitempty"`

	//Kind: Kind of encryption protector. This is metadata used for the Azure portal
	//experience.
	Kind *string `json:"kind,omitempty"`

	//Location: Location to deploy resource to
	Location *v20150101.ResourceLocations `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the resource
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Properties: Properties for a server key execution.
	Properties ServerKeyProperties `json:"properties"`

	//Scope: Scope for the resource or deployment. Today, this works for two cases: 1)
	//setting the scope for extension resources 2) deploying resources to the tenant
	//scope in non-tenant scope deployments
	Scope *string `json:"scope,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// +kubebuilder:validation:Required
	//Type: Resource type
	Type ServersKeysSpecType `json:"type"`
}

//Generated from: https://schema.management.azure.com/schemas/2015-05-01-preview/Microsoft.Sql.json#/definitions/ServerKeyProperties
type ServerKeyProperties struct {

	//CreationDate: The server key creation date.
	CreationDate *string `json:"creationDate,omitempty"`

	// +kubebuilder:validation:Required
	//ServerKeyType: The server key type like 'ServiceManaged', 'AzureKeyVault'.
	ServerKeyType ServerKeyPropertiesServerKeyType `json:"serverKeyType"`

	//Thumbprint: Thumbprint of the server key.
	Thumbprint *string `json:"thumbprint,omitempty"`

	//Uri: The URI of the server key.
	Uri *string `json:"uri,omitempty"`
}

//Generated from:
type ServerKeyProperties_Status struct {

	//CreationDate: The server key creation date.
	CreationDate *string `json:"creationDate,omitempty"`

	// +kubebuilder:validation:Required
	//ServerKeyType: The server key type like 'ServiceManaged', 'AzureKeyVault'.
	ServerKeyType ServerKeyPropertiesStatusServerKeyType `json:"serverKeyType"`

	//Subregion: Subregion of the server key.
	Subregion *string `json:"subregion,omitempty"`

	//Thumbprint: Thumbprint of the server key.
	Thumbprint *string `json:"thumbprint,omitempty"`

	//Uri: The URI of the server key.
	Uri *string `json:"uri,omitempty"`
}

// +kubebuilder:validation:Enum={"2015-05-01-preview"}
type ServersKeysSpecApiVersion string

const ServersKeysSpecApiVersion20150501Preview = ServersKeysSpecApiVersion("2015-05-01-preview")

// +kubebuilder:validation:Enum={"Microsoft.Sql/servers/keys"}
type ServersKeysSpecType string

const ServersKeysSpecTypeMicrosoftSqlServersKeys = ServersKeysSpecType("Microsoft.Sql/servers/keys")

// +kubebuilder:validation:Enum={"AzureKeyVault","ServiceManaged"}
type ServerKeyPropertiesServerKeyType string

const (
	ServerKeyPropertiesServerKeyTypeAzureKeyVault  = ServerKeyPropertiesServerKeyType("AzureKeyVault")
	ServerKeyPropertiesServerKeyTypeServiceManaged = ServerKeyPropertiesServerKeyType("ServiceManaged")
)

// +kubebuilder:validation:Enum={"AzureKeyVault","ServiceManaged"}
type ServerKeyPropertiesStatusServerKeyType string

const (
	ServerKeyPropertiesStatusServerKeyTypeAzureKeyVault  = ServerKeyPropertiesStatusServerKeyType("AzureKeyVault")
	ServerKeyPropertiesStatusServerKeyTypeServiceManaged = ServerKeyPropertiesStatusServerKeyType("ServiceManaged")
)

func init() {
	SchemeBuilder.Register(&ServersKeys{}, &ServersKeysList{})
}
