// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200501

import (
	"github.com/Azure/k8s-infra/hack/crossplane/apis/deploymenttemplate/v20150101"
	"github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
type ExpressRouteGateways struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ExpressRouteGateways_Spec  `json:"spec,omitempty"`
	Status            ExpressRouteGateway_Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type ExpressRouteGatewaysList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ExpressRouteGateways `json:"items"`
}

type ExpressRouteGateway_Status struct {
	v1alpha1.ResourceStatus `json:",inline"`
	AtProvider              ExpressRouteGatewaysObservation `json:"atProvider"`
}

type ExpressRouteGateways_Spec struct {
	v1alpha1.ResourceSpec `json:",inline"`
	ForProvider           ExpressRouteGatewaysParameters `json:"forProvider"`
}

type ExpressRouteGatewaysObservation struct {

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//Properties: Properties of the express route gateway.
	Properties *ExpressRouteGatewayProperties_Status `json:"properties,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

type ExpressRouteGatewaysParameters struct {

	// +kubebuilder:validation:Required
	//ApiVersion: API Version of the resource type, optional when apiProfile is used
	//on the template
	ApiVersion ExpressRouteGatewaysSpecApiVersion `json:"apiVersion"`
	Comments   *string                            `json:"comments,omitempty"`

	//Condition: Condition of the resource
	Condition *bool                   `json:"condition,omitempty"`
	Copy      *v20150101.ResourceCopy `json:"copy,omitempty"`

	//DependsOn: Collection of resources this resource depends on
	DependsOn []string `json:"dependsOn,omitempty"`

	//Location: Location to deploy resource to
	Location string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the resource
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Properties: Properties of the express route gateway.
	Properties ExpressRouteGatewayProperties `json:"properties"`

	//Scope: Scope for the resource or deployment. Today, this works for two cases: 1)
	//setting the scope for extension resources 2) deploying resources to the tenant
	//scope in non-tenant scope deployments
	Scope *string `json:"scope,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// +kubebuilder:validation:Required
	//Type: Resource type
	Type ExpressRouteGatewaysSpecType `json:"type"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/ExpressRouteGatewayProperties
type ExpressRouteGatewayProperties struct {

	//AutoScaleConfiguration: Configuration for auto scaling.
	AutoScaleConfiguration *ExpressRouteGatewayPropertiesAutoScaleConfiguration `json:"autoScaleConfiguration,omitempty"`

	// +kubebuilder:validation:Required
	//VirtualHub: The Virtual Hub where the ExpressRoute gateway is or will be
	//deployed.
	VirtualHub SubResource `json:"virtualHub"`
}

//Generated from:
type ExpressRouteGatewayProperties_Status struct {

	//AutoScaleConfiguration: Configuration for auto scaling.
	AutoScaleConfiguration *ExpressRouteGatewayProperties_Status_AutoScaleConfiguration `json:"autoScaleConfiguration,omitempty"`

	//ExpressRouteConnections: List of ExpressRoute connections to the ExpressRoute
	//gateway.
	ExpressRouteConnections []ExpressRouteConnection_Status `json:"expressRouteConnections,omitempty"`

	//ProvisioningState: The provisioning state of the express route gateway resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	// +kubebuilder:validation:Required
	//VirtualHub: The Virtual Hub where the ExpressRoute gateway is or will be
	//deployed.
	VirtualHub VirtualHubId_Status `json:"virtualHub"`
}

// +kubebuilder:validation:Enum={"2020-05-01"}
type ExpressRouteGatewaysSpecApiVersion string

const ExpressRouteGatewaysSpecApiVersion20200501 = ExpressRouteGatewaysSpecApiVersion("2020-05-01")

// +kubebuilder:validation:Enum={"Microsoft.Network/expressRouteGateways"}
type ExpressRouteGatewaysSpecType string

const ExpressRouteGatewaysSpecTypeMicrosoftNetworkExpressRouteGateways = ExpressRouteGatewaysSpecType("Microsoft.Network/expressRouteGateways")

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/ExpressRouteGatewayPropertiesAutoScaleConfiguration
type ExpressRouteGatewayPropertiesAutoScaleConfiguration struct {

	//Bounds: Minimum and maximum number of scale units to deploy.
	Bounds *ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds `json:"bounds,omitempty"`
}

type ExpressRouteGatewayProperties_Status_AutoScaleConfiguration struct {

	//Bounds: Minimum and maximum number of scale units to deploy.
	Bounds *ExpressRouteGatewayProperties_Status_AutoScaleConfiguration_Bounds `json:"bounds,omitempty"`
}

//Generated from:
type VirtualHubId_Status struct {

	//Id: The resource URI for the Virtual Hub where the ExpressRoute gateway is or
	//will be deployed. The Virtual Hub resource and the ExpressRoute gateway resource
	//reside in the same subscription.
	Id *string `json:"id,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds
type ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds struct {

	//Max: Maximum number of scale units deployed for ExpressRoute gateway.
	Max *int `json:"max,omitempty"`

	//Min: Minimum number of scale units deployed for ExpressRoute gateway.
	Min *int `json:"min,omitempty"`
}

type ExpressRouteGatewayProperties_Status_AutoScaleConfiguration_Bounds struct {

	//Max: Maximum number of scale units deployed for ExpressRoute gateway.
	Max *int `json:"max,omitempty"`

	//Min: Minimum number of scale units deployed for ExpressRoute gateway.
	Min *int `json:"min,omitempty"`
}

func init() {
	SchemeBuilder.Register(&ExpressRouteGateways{}, &ExpressRouteGatewaysList{})
}
