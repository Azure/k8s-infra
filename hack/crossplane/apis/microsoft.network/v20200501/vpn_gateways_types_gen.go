// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200501

import (
	"github.com/Azure/k8s-infra/hack/crossplane/apis/deploymenttemplate/v20150101"
	"github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
type VpnGateways struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpnGateways_Spec  `json:"spec,omitempty"`
	Status            VpnGateway_Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type VpnGatewaysList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VpnGateways `json:"items"`
}

type VpnGateway_Status struct {
	v1alpha1.ResourceStatus `json:",inline"`
	AtProvider              VpnGatewaysObservation `json:"atProvider"`
}

type VpnGateways_Spec struct {
	v1alpha1.ResourceSpec `json:",inline"`
	ForProvider           VpnGatewaysParameters `json:"forProvider"`
}

type VpnGatewaysObservation struct {

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//Properties: Properties of the VPN gateway.
	Properties *VpnGatewayProperties_Status `json:"properties,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

type VpnGatewaysParameters struct {

	// +kubebuilder:validation:Required
	//ApiVersion: API Version of the resource type, optional when apiProfile is used
	//on the template
	ApiVersion VpnGatewaysSpecApiVersion `json:"apiVersion"`
	Comments   *string                   `json:"comments,omitempty"`

	//Condition: Condition of the resource
	Condition *bool                   `json:"condition,omitempty"`
	Copy      *v20150101.ResourceCopy `json:"copy,omitempty"`

	//DependsOn: Collection of resources this resource depends on
	DependsOn []string `json:"dependsOn,omitempty"`

	//Location: Location to deploy resource to
	Location string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the resource
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Properties: Properties of the VPN gateway.
	Properties                VpnGatewayProperties `json:"properties"`
	ResourceGroupName         string               `json:"resourceGroupName"`
	ResourceGroupNameRef      *v1alpha1.Reference  `json:"resourceGroupNameRef,omitempty"`
	ResourceGroupNameSelector *v1alpha1.Selector   `json:"resourceGroupNameSelector,omitempty"`

	//Scope: Scope for the resource or deployment. Today, this works for two cases: 1)
	//setting the scope for extension resources 2) deploying resources to the tenant
	//scope in non-tenant scope deployments
	Scope *string `json:"scope,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// +kubebuilder:validation:Required
	//Type: Resource type
	Type VpnGatewaysSpecType `json:"type"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/VpnGatewayProperties
type VpnGatewayProperties struct {

	//BgpSettings: Local network gateway's BGP speaker settings.
	BgpSettings *BgpSettings `json:"bgpSettings,omitempty"`

	//Connections: List of all vpn connections to the gateway.
	Connections []VpnConnection `json:"connections,omitempty"`

	//VirtualHub: The VirtualHub to which the gateway belongs.
	VirtualHub *SubResource `json:"virtualHub,omitempty"`

	//VpnGatewayScaleUnit: The scale unit for this vpn gateway.
	VpnGatewayScaleUnit *int `json:"vpnGatewayScaleUnit,omitempty"`
}

//Generated from:
type VpnGatewayProperties_Status struct {

	//BgpSettings: Local network gateway's BGP speaker settings.
	BgpSettings *BgpSettings_Status `json:"bgpSettings,omitempty"`

	//Connections: List of all vpn connections to the gateway.
	Connections []VpnConnection_Status `json:"connections,omitempty"`

	//ProvisioningState: The provisioning state of the VPN gateway resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//VirtualHub: The VirtualHub to which the gateway belongs.
	VirtualHub *SubResource_Status `json:"virtualHub,omitempty"`

	//VpnGatewayScaleUnit: The scale unit for this vpn gateway.
	VpnGatewayScaleUnit *int `json:"vpnGatewayScaleUnit,omitempty"`
}

// +kubebuilder:validation:Enum={"2020-05-01"}
type VpnGatewaysSpecApiVersion string

const VpnGatewaysSpecApiVersion20200501 = VpnGatewaysSpecApiVersion("2020-05-01")

// +kubebuilder:validation:Enum={"Microsoft.Network/vpnGateways"}
type VpnGatewaysSpecType string

const VpnGatewaysSpecTypeMicrosoftNetworkVpnGateways = VpnGatewaysSpecType("Microsoft.Network/vpnGateways")

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/VpnConnection
type VpnConnection struct {

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//Properties: Properties of the VPN connection.
	Properties *VpnConnectionProperties `json:"properties,omitempty"`
}

func init() {
	SchemeBuilder.Register(&VpnGateways{}, &VpnGatewaysList{})
}
