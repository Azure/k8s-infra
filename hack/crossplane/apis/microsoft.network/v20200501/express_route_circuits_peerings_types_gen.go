// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200501

import (
	"github.com/Azure/k8s-infra/hack/crossplane/apis/deploymenttemplate/v20150101"
	"github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
type ExpressRouteCircuitsPeerings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ExpressRouteCircuitsPeerings_Spec `json:"spec,omitempty"`
	Status            ExpressRouteCircuitPeering_Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type ExpressRouteCircuitsPeeringsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ExpressRouteCircuitsPeerings `json:"items"`
}

type ExpressRouteCircuitPeering_Status struct {
	v1alpha1.ResourceStatus `json:",inline"`
	AtProvider              ExpressRouteCircuitsPeeringsObservation `json:"atProvider"`
}

type ExpressRouteCircuitsPeerings_Spec struct {
	v1alpha1.ResourceSpec `json:",inline"`
	ForProvider           ExpressRouteCircuitsPeeringsParameters `json:"forProvider"`
}

type ExpressRouteCircuitsPeeringsObservation struct {

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//Properties: Properties of the express route circuit peering.
	Properties *ExpressRouteCircuitPeeringPropertiesFormat_Status `json:"properties,omitempty"`

	//Type: Type of the resource.
	Type *string `json:"type,omitempty"`
}

type ExpressRouteCircuitsPeeringsParameters struct {

	// +kubebuilder:validation:Required
	//ApiVersion: API Version of the resource type, optional when apiProfile is used
	//on the template
	ApiVersion ExpressRouteCircuitsPeeringsSpecApiVersion `json:"apiVersion"`
	Comments   *string                                    `json:"comments,omitempty"`

	//Condition: Condition of the resource
	Condition *bool                   `json:"condition,omitempty"`
	Copy      *v20150101.ResourceCopy `json:"copy,omitempty"`

	//DependsOn: Collection of resources this resource depends on
	DependsOn []string `json:"dependsOn,omitempty"`

	//Location: Location to deploy resource to
	Location *v20150101.ResourceLocations `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the resource
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Properties: Properties of the express route circuit peering.
	Properties ExpressRouteCircuitPeeringPropertiesFormat `json:"properties"`

	//Scope: Scope for the resource or deployment. Today, this works for two cases: 1)
	//setting the scope for extension resources 2) deploying resources to the tenant
	//scope in non-tenant scope deployments
	Scope *string `json:"scope,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// +kubebuilder:validation:Required
	//Type: Resource type
	Type ExpressRouteCircuitsPeeringsSpecType `json:"type"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/ExpressRouteCircuitPeeringPropertiesFormat
type ExpressRouteCircuitPeeringPropertiesFormat struct {

	//ExpressRouteConnection: The ExpressRoute connection.
	ExpressRouteConnection *SubResource `json:"expressRouteConnection,omitempty"`

	//GatewayManagerEtag: The GatewayManager Etag.
	GatewayManagerEtag *string `json:"gatewayManagerEtag,omitempty"`

	//Ipv6PeeringConfig: The IPv6 peering configuration.
	Ipv6PeeringConfig *Ipv6ExpressRouteCircuitPeeringConfig `json:"ipv6PeeringConfig,omitempty"`

	//MicrosoftPeeringConfig: The Microsoft peering configuration.
	MicrosoftPeeringConfig *ExpressRouteCircuitPeeringConfig `json:"microsoftPeeringConfig,omitempty"`

	//PeerASN: The peer ASN.
	PeerASN *int `json:"peerASN,omitempty"`

	//PeeringType: The peering type.
	PeeringType *ExpressRouteCircuitPeeringPropertiesFormatPeeringType `json:"peeringType,omitempty"`

	//PrimaryPeerAddressPrefix: The primary address prefix.
	PrimaryPeerAddressPrefix *string `json:"primaryPeerAddressPrefix,omitempty"`

	//RouteFilter: The reference to the RouteFilter resource.
	RouteFilter *SubResource `json:"routeFilter,omitempty"`

	//SecondaryPeerAddressPrefix: The secondary address prefix.
	SecondaryPeerAddressPrefix *string `json:"secondaryPeerAddressPrefix,omitempty"`

	//SharedKey: The shared key.
	SharedKey *string `json:"sharedKey,omitempty"`

	//State: The peering state.
	State *ExpressRouteCircuitPeeringPropertiesFormatState `json:"state,omitempty"`

	//Stats: The peering stats of express route circuit.
	Stats *ExpressRouteCircuitStats `json:"stats,omitempty"`

	//VlanId: The VLAN ID.
	VlanId *int `json:"vlanId,omitempty"`
}

//Generated from:
type ExpressRouteCircuitPeeringPropertiesFormat_Status struct {

	//AzureASN: The Azure ASN.
	AzureASN *int `json:"azureASN,omitempty"`

	//Connections: The list of circuit connections associated with Azure Private
	//Peering for this circuit.
	Connections []ExpressRouteCircuitConnection_Status `json:"connections,omitempty"`

	//ExpressRouteConnection: The ExpressRoute connection.
	ExpressRouteConnection *ExpressRouteConnectionId_Status `json:"expressRouteConnection,omitempty"`

	//GatewayManagerEtag: The GatewayManager Etag.
	GatewayManagerEtag *string `json:"gatewayManagerEtag,omitempty"`

	//Ipv6PeeringConfig: The IPv6 peering configuration.
	Ipv6PeeringConfig *Ipv6ExpressRouteCircuitPeeringConfig_Status `json:"ipv6PeeringConfig,omitempty"`

	//LastModifiedBy: Who was the last to modify the peering.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	//MicrosoftPeeringConfig: The Microsoft peering configuration.
	MicrosoftPeeringConfig *ExpressRouteCircuitPeeringConfig_Status `json:"microsoftPeeringConfig,omitempty"`

	//PeerASN: The peer ASN.
	PeerASN *int `json:"peerASN,omitempty"`

	//PeeredConnections: The list of peered circuit connections associated with Azure
	//Private Peering for this circuit.
	PeeredConnections []PeerExpressRouteCircuitConnection_Status `json:"peeredConnections,omitempty"`

	//PeeringType: The peering type.
	PeeringType *ExpressRoutePeeringType_Status `json:"peeringType,omitempty"`

	//PrimaryAzurePort: The primary port.
	PrimaryAzurePort *string `json:"primaryAzurePort,omitempty"`

	//PrimaryPeerAddressPrefix: The primary address prefix.
	PrimaryPeerAddressPrefix *string `json:"primaryPeerAddressPrefix,omitempty"`

	//ProvisioningState: The provisioning state of the express route circuit peering
	//resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//RouteFilter: The reference to the RouteFilter resource.
	RouteFilter *SubResource_Status `json:"routeFilter,omitempty"`

	//SecondaryAzurePort: The secondary port.
	SecondaryAzurePort *string `json:"secondaryAzurePort,omitempty"`

	//SecondaryPeerAddressPrefix: The secondary address prefix.
	SecondaryPeerAddressPrefix *string `json:"secondaryPeerAddressPrefix,omitempty"`

	//SharedKey: The shared key.
	SharedKey *string `json:"sharedKey,omitempty"`

	//State: The peering state.
	State *ExpressRoutePeeringState_Status `json:"state,omitempty"`

	//Stats: The peering stats of express route circuit.
	Stats *ExpressRouteCircuitStats_Status `json:"stats,omitempty"`

	//VlanId: The VLAN ID.
	VlanId *int `json:"vlanId,omitempty"`
}

// +kubebuilder:validation:Enum={"2020-05-01"}
type ExpressRouteCircuitsPeeringsSpecApiVersion string

const ExpressRouteCircuitsPeeringsSpecApiVersion20200501 = ExpressRouteCircuitsPeeringsSpecApiVersion("2020-05-01")

// +kubebuilder:validation:Enum={"Microsoft.Network/expressRouteCircuits/peerings"}
type ExpressRouteCircuitsPeeringsSpecType string

const ExpressRouteCircuitsPeeringsSpecTypeMicrosoftNetworkExpressRouteCircuitsPeerings = ExpressRouteCircuitsPeeringsSpecType("Microsoft.Network/expressRouteCircuits/peerings")

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/ExpressRouteCircuitPeeringConfig
type ExpressRouteCircuitPeeringConfig struct {

	//AdvertisedCommunities: The communities of bgp peering. Specified for microsoft
	//peering.
	AdvertisedCommunities []string `json:"advertisedCommunities,omitempty"`

	//AdvertisedPublicPrefixes: The reference to AdvertisedPublicPrefixes.
	AdvertisedPublicPrefixes []string `json:"advertisedPublicPrefixes,omitempty"`

	//CustomerASN: The CustomerASN of the peering.
	CustomerASN *int `json:"customerASN,omitempty"`

	//LegacyMode: The legacy mode of the peering.
	LegacyMode *int `json:"legacyMode,omitempty"`

	//RoutingRegistryName: The RoutingRegistryName of the configuration.
	RoutingRegistryName *string `json:"routingRegistryName,omitempty"`
}

//Generated from:
type ExpressRouteCircuitPeeringConfig_Status struct {

	//AdvertisedCommunities: The communities of bgp peering. Specified for microsoft
	//peering.
	AdvertisedCommunities []string `json:"advertisedCommunities,omitempty"`

	//AdvertisedPublicPrefixes: The reference to AdvertisedPublicPrefixes.
	AdvertisedPublicPrefixes []string `json:"advertisedPublicPrefixes,omitempty"`

	//AdvertisedPublicPrefixesState: The advertised public prefix state of the Peering
	//resource.
	AdvertisedPublicPrefixesState *ExpressRouteCircuitPeeringConfigStatusAdvertisedPublicPrefixesState `json:"advertisedPublicPrefixesState,omitempty"`

	//CustomerASN: The CustomerASN of the peering.
	CustomerASN *int `json:"customerASN,omitempty"`

	//LegacyMode: The legacy mode of the peering.
	LegacyMode *int `json:"legacyMode,omitempty"`

	//RoutingRegistryName: The RoutingRegistryName of the configuration.
	RoutingRegistryName *string `json:"routingRegistryName,omitempty"`
}

// +kubebuilder:validation:Enum={"AzurePrivatePeering","AzurePublicPeering","MicrosoftPeering"}
type ExpressRouteCircuitPeeringPropertiesFormatPeeringType string

const (
	ExpressRouteCircuitPeeringPropertiesFormatPeeringTypeAzurePrivatePeering = ExpressRouteCircuitPeeringPropertiesFormatPeeringType("AzurePrivatePeering")
	ExpressRouteCircuitPeeringPropertiesFormatPeeringTypeAzurePublicPeering  = ExpressRouteCircuitPeeringPropertiesFormatPeeringType("AzurePublicPeering")
	ExpressRouteCircuitPeeringPropertiesFormatPeeringTypeMicrosoftPeering    = ExpressRouteCircuitPeeringPropertiesFormatPeeringType("MicrosoftPeering")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ExpressRouteCircuitPeeringPropertiesFormatState string

const (
	ExpressRouteCircuitPeeringPropertiesFormatStateDisabled = ExpressRouteCircuitPeeringPropertiesFormatState("Disabled")
	ExpressRouteCircuitPeeringPropertiesFormatStateEnabled  = ExpressRouteCircuitPeeringPropertiesFormatState("Enabled")
)

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/ExpressRouteCircuitStats
type ExpressRouteCircuitStats struct {

	//PrimarybytesIn: The Primary BytesIn of the peering.
	PrimarybytesIn *int `json:"primarybytesIn,omitempty"`

	//PrimarybytesOut: The primary BytesOut of the peering.
	PrimarybytesOut *int `json:"primarybytesOut,omitempty"`

	//SecondarybytesIn: The secondary BytesIn of the peering.
	SecondarybytesIn *int `json:"secondarybytesIn,omitempty"`

	//SecondarybytesOut: The secondary BytesOut of the peering.
	SecondarybytesOut *int `json:"secondarybytesOut,omitempty"`
}

//Generated from:
type ExpressRouteCircuitStats_Status struct {

	//PrimarybytesIn: The Primary BytesIn of the peering.
	PrimarybytesIn *int `json:"primarybytesIn,omitempty"`

	//PrimarybytesOut: The primary BytesOut of the peering.
	PrimarybytesOut *int `json:"primarybytesOut,omitempty"`

	//SecondarybytesIn: The secondary BytesIn of the peering.
	SecondarybytesIn *int `json:"secondarybytesIn,omitempty"`

	//SecondarybytesOut: The secondary BytesOut of the peering.
	SecondarybytesOut *int `json:"secondarybytesOut,omitempty"`
}

//Generated from:
type ExpressRouteConnectionId_Status struct {

	//Id: The ID of the ExpressRouteConnection.
	Id *string `json:"id,omitempty"`
}

//Generated from:
// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ExpressRoutePeeringState_Status string

const (
	ExpressRoutePeeringState_StatusDisabled = ExpressRoutePeeringState_Status("Disabled")
	ExpressRoutePeeringState_StatusEnabled  = ExpressRoutePeeringState_Status("Enabled")
)

//Generated from:
// +kubebuilder:validation:Enum={"AzurePrivatePeering","AzurePublicPeering","MicrosoftPeering"}
type ExpressRoutePeeringType_Status string

const (
	ExpressRoutePeeringType_StatusAzurePrivatePeering = ExpressRoutePeeringType_Status("AzurePrivatePeering")
	ExpressRoutePeeringType_StatusAzurePublicPeering  = ExpressRoutePeeringType_Status("AzurePublicPeering")
	ExpressRoutePeeringType_StatusMicrosoftPeering    = ExpressRoutePeeringType_Status("MicrosoftPeering")
)

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/Ipv6ExpressRouteCircuitPeeringConfig
type Ipv6ExpressRouteCircuitPeeringConfig struct {

	//MicrosoftPeeringConfig: The Microsoft peering configuration.
	MicrosoftPeeringConfig *ExpressRouteCircuitPeeringConfig `json:"microsoftPeeringConfig,omitempty"`

	//PrimaryPeerAddressPrefix: The primary address prefix.
	PrimaryPeerAddressPrefix *string `json:"primaryPeerAddressPrefix,omitempty"`

	//RouteFilter: The reference to the RouteFilter resource.
	RouteFilter *SubResource `json:"routeFilter,omitempty"`

	//SecondaryPeerAddressPrefix: The secondary address prefix.
	SecondaryPeerAddressPrefix *string `json:"secondaryPeerAddressPrefix,omitempty"`

	//State: The state of peering.
	State *Ipv6ExpressRouteCircuitPeeringConfigState `json:"state,omitempty"`
}

//Generated from:
type Ipv6ExpressRouteCircuitPeeringConfig_Status struct {

	//MicrosoftPeeringConfig: The Microsoft peering configuration.
	MicrosoftPeeringConfig *ExpressRouteCircuitPeeringConfig_Status `json:"microsoftPeeringConfig,omitempty"`

	//PrimaryPeerAddressPrefix: The primary address prefix.
	PrimaryPeerAddressPrefix *string `json:"primaryPeerAddressPrefix,omitempty"`

	//RouteFilter: The reference to the RouteFilter resource.
	RouteFilter *SubResource_Status `json:"routeFilter,omitempty"`

	//SecondaryPeerAddressPrefix: The secondary address prefix.
	SecondaryPeerAddressPrefix *string `json:"secondaryPeerAddressPrefix,omitempty"`

	//State: The state of peering.
	State *Ipv6ExpressRouteCircuitPeeringConfigStatusState `json:"state,omitempty"`
}

//Generated from:
type PeerExpressRouteCircuitConnection_Status struct {

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//Properties: Properties of the peer express route circuit connection.
	Properties *PeerExpressRouteCircuitConnectionPropertiesFormat_Status `json:"properties,omitempty"`

	//Type: Type of the resource.
	Type *string `json:"type,omitempty"`
}

// +kubebuilder:validation:Enum={"Configured","Configuring","NotConfigured","ValidationNeeded"}
type ExpressRouteCircuitPeeringConfigStatusAdvertisedPublicPrefixesState string

const (
	ExpressRouteCircuitPeeringConfigStatusAdvertisedPublicPrefixesStateConfigured       = ExpressRouteCircuitPeeringConfigStatusAdvertisedPublicPrefixesState("Configured")
	ExpressRouteCircuitPeeringConfigStatusAdvertisedPublicPrefixesStateConfiguring      = ExpressRouteCircuitPeeringConfigStatusAdvertisedPublicPrefixesState("Configuring")
	ExpressRouteCircuitPeeringConfigStatusAdvertisedPublicPrefixesStateNotConfigured    = ExpressRouteCircuitPeeringConfigStatusAdvertisedPublicPrefixesState("NotConfigured")
	ExpressRouteCircuitPeeringConfigStatusAdvertisedPublicPrefixesStateValidationNeeded = ExpressRouteCircuitPeeringConfigStatusAdvertisedPublicPrefixesState("ValidationNeeded")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type Ipv6ExpressRouteCircuitPeeringConfigState string

const (
	Ipv6ExpressRouteCircuitPeeringConfigStateDisabled = Ipv6ExpressRouteCircuitPeeringConfigState("Disabled")
	Ipv6ExpressRouteCircuitPeeringConfigStateEnabled  = Ipv6ExpressRouteCircuitPeeringConfigState("Enabled")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type Ipv6ExpressRouteCircuitPeeringConfigStatusState string

const (
	Ipv6ExpressRouteCircuitPeeringConfigStatusStateDisabled = Ipv6ExpressRouteCircuitPeeringConfigStatusState("Disabled")
	Ipv6ExpressRouteCircuitPeeringConfigStatusStateEnabled  = Ipv6ExpressRouteCircuitPeeringConfigStatusState("Enabled")
)

//Generated from:
type PeerExpressRouteCircuitConnectionPropertiesFormat_Status struct {

	//AddressPrefix: /29 IP address space to carve out Customer addresses for tunnels.
	AddressPrefix *string `json:"addressPrefix,omitempty"`

	//AuthResourceGuid: The resource guid of the authorization used for the express
	//route circuit connection.
	AuthResourceGuid *string `json:"authResourceGuid,omitempty"`

	//CircuitConnectionStatus: Express Route Circuit connection state.
	CircuitConnectionStatus *CircuitConnectionStatus_Status `json:"circuitConnectionStatus,omitempty"`

	//ConnectionName: The name of the express route circuit connection resource.
	ConnectionName *string `json:"connectionName,omitempty"`

	//ExpressRouteCircuitPeering: Reference to Express Route Circuit Private Peering
	//Resource of the circuit.
	ExpressRouteCircuitPeering *SubResource_Status `json:"expressRouteCircuitPeering,omitempty"`

	//PeerExpressRouteCircuitPeering: Reference to Express Route Circuit Private
	//Peering Resource of the peered circuit.
	PeerExpressRouteCircuitPeering *SubResource_Status `json:"peerExpressRouteCircuitPeering,omitempty"`

	//ProvisioningState: The provisioning state of the peer express route circuit
	//connection resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`
}

func init() {
	SchemeBuilder.Register(&ExpressRouteCircuitsPeerings{}, &ExpressRouteCircuitsPeeringsList{})
}
