// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200501

import (
	"fmt"
	"github.com/Azure/k8s-infra/hack/generated/apis/deploymenttemplate/v20150101"
	"github.com/Azure/k8s-infra/hack/generated/pkg/genruntime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
type VirtualRouters struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualRouters_Spec  `json:"spec,omitempty"`
	Status            VirtualRouter_Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type VirtualRoutersList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualRouters `json:"items"`
}

//Generated from:
type VirtualRouter_Status struct {

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//Properties: Properties of the Virtual Router.
	Properties *VirtualRouterPropertiesFormat_Status `json:"properties,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

type VirtualRouters_Spec struct {
	ForProvider VirtualRoutersParameters `json:"forProvider"`
}

//Generated from:
type VirtualRouterPropertiesFormat_Status struct {

	//HostedGateway: The Gateway on which VirtualRouter is hosted.
	HostedGateway *SubResource_Status `json:"hostedGateway,omitempty"`

	//HostedSubnet: The Subnet on which VirtualRouter is hosted.
	HostedSubnet *SubResource_Status `json:"hostedSubnet,omitempty"`

	//Peerings: List of references to VirtualRouterPeerings.
	Peerings []SubResource_Status `json:"peerings,omitempty"`

	//ProvisioningState: The provisioning state of the resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//VirtualRouterAsn: VirtualRouter ASN.
	VirtualRouterAsn *int `json:"virtualRouterAsn,omitempty"`

	//VirtualRouterIps: VirtualRouter IPs.
	VirtualRouterIps []string `json:"virtualRouterIps,omitempty"`
}

type VirtualRoutersParameters struct {

	// +kubebuilder:validation:Required
	//ApiVersion: API Version of the resource type, optional when apiProfile is used
	//on the template
	ApiVersion VirtualRoutersSpecApiVersion `json:"apiVersion"`
	Comments   *string                      `json:"comments,omitempty"`

	//Condition: Condition of the resource
	Condition *bool                   `json:"condition,omitempty"`
	Copy      *v20150101.ResourceCopy `json:"copy,omitempty"`

	//DependsOn: Collection of resources this resource depends on
	DependsOn []string `json:"dependsOn,omitempty"`

	//Location: Location to deploy resource to
	Location string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the resource
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Properties: Properties of the Virtual Router.
	Properties VirtualRouterPropertiesFormat `json:"properties"`

	//Scope: Scope for the resource or deployment. Today, this works for two cases: 1)
	//setting the scope for extension resources 2) deploying resources to the tenant
	//scope in non-tenant scope deployments
	Scope *string `json:"scope,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// +kubebuilder:validation:Required
	//Type: Resource type
	Type VirtualRoutersSpecType `json:"type"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/VirtualRouterPropertiesFormat
type VirtualRouterPropertiesFormat struct {

	//HostedGateway: The Gateway on which VirtualRouter is hosted.
	HostedGateway *SubResource `json:"hostedGateway,omitempty"`

	//HostedSubnet: The Subnet on which VirtualRouter is hosted.
	HostedSubnet *SubResource `json:"hostedSubnet,omitempty"`

	//VirtualRouterAsn: VirtualRouter ASN.
	VirtualRouterAsn *int `json:"virtualRouterAsn,omitempty"`

	//VirtualRouterIps: VirtualRouter IPs.
	VirtualRouterIps []string `json:"virtualRouterIps,omitempty"`
}

// +kubebuilder:validation:Enum={"2020-05-01"}
type VirtualRoutersSpecApiVersion string

const VirtualRoutersSpecApiVersion20200501 = VirtualRoutersSpecApiVersion("2020-05-01")

// +kubebuilder:validation:Enum={"Microsoft.Network/virtualRouters"}
type VirtualRoutersSpecType string

const VirtualRoutersSpecTypeMicrosoftNetworkVirtualRouters = VirtualRoutersSpecType("Microsoft.Network/virtualRouters")

func init() {
	SchemeBuilder.Register(&VirtualRouters{}, &VirtualRoutersList{})
}
