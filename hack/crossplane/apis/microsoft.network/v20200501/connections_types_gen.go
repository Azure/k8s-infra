// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200501

import (
	"github.com/Azure/k8s-infra/hack/crossplane/apis/deploymenttemplate/v20150101"
	"github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
type Connections struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Connections_Spec                       `json:"spec,omitempty"`
	Status            VirtualNetworkGatewayConnection_Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type ConnectionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Connections `json:"items"`
}

type Connections_Spec struct {
	v1alpha1.ResourceSpec `json:",inline"`
	ForProvider           ConnectionsParameters `json:"forProvider"`
}

type VirtualNetworkGatewayConnection_Status struct {
	v1alpha1.ResourceStatus `json:",inline"`
	AtProvider              ConnectionsObservation `json:"atProvider"`
}

type ConnectionsObservation struct {

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	//Properties: Properties of the virtual network gateway connection.
	Properties VirtualNetworkGatewayConnectionPropertiesFormat_Status `json:"properties"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

type ConnectionsParameters struct {

	// +kubebuilder:validation:Required
	//ApiVersion: API Version of the resource type, optional when apiProfile is used
	//on the template
	ApiVersion ConnectionsSpecApiVersion `json:"apiVersion"`
	Comments   *string                   `json:"comments,omitempty"`

	//Condition: Condition of the resource
	Condition *bool                   `json:"condition,omitempty"`
	Copy      *v20150101.ResourceCopy `json:"copy,omitempty"`

	//DependsOn: Collection of resources this resource depends on
	DependsOn []string `json:"dependsOn,omitempty"`

	//Location: Location to deploy resource to
	Location string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the resource
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Properties: Properties of the virtual network gateway connection.
	Properties                VirtualNetworkGatewayConnectionPropertiesFormat `json:"properties"`
	ResourceGroupName         string                                          `json:"resourceGroupName"`
	ResourceGroupNameRef      *v1alpha1.Reference                             `json:"resourceGroupNameRef,omitempty"`
	ResourceGroupNameSelector *v1alpha1.Selector                              `json:"resourceGroupNameSelector,omitempty"`

	//Scope: Scope for the resource or deployment. Today, this works for two cases: 1)
	//setting the scope for extension resources 2) deploying resources to the tenant
	//scope in non-tenant scope deployments
	Scope *string `json:"scope,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// +kubebuilder:validation:Required
	//Type: Resource type
	Type ConnectionsSpecType `json:"type"`
}

// +kubebuilder:validation:Enum={"2020-05-01"}
type ConnectionsSpecApiVersion string

const ConnectionsSpecApiVersion20200501 = ConnectionsSpecApiVersion("2020-05-01")

// +kubebuilder:validation:Enum={"Microsoft.Network/connections"}
type ConnectionsSpecType string

const ConnectionsSpecTypeMicrosoftNetworkConnections = ConnectionsSpecType("Microsoft.Network/connections")

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/VirtualNetworkGatewayConnectionPropertiesFormat
type VirtualNetworkGatewayConnectionPropertiesFormat struct {

	//AuthorizationKey: The authorizationKey.
	AuthorizationKey *string `json:"authorizationKey,omitempty"`

	//ConnectionProtocol: Connection protocol used for this connection.
	ConnectionProtocol *VirtualNetworkGatewayConnectionPropertiesFormatConnectionProtocol `json:"connectionProtocol,omitempty"`

	// +kubebuilder:validation:Required
	//ConnectionType: Gateway connection type.
	ConnectionType VirtualNetworkGatewayConnectionPropertiesFormatConnectionType `json:"connectionType"`

	//DpdTimeoutSeconds: The dead peer detection timeout of this connection in seconds.
	DpdTimeoutSeconds *int `json:"dpdTimeoutSeconds,omitempty"`

	//EnableBgp: EnableBgp flag.
	EnableBgp *bool `json:"enableBgp,omitempty"`

	//ExpressRouteGatewayBypass: Bypass ExpressRoute Gateway for data forwarding.
	ExpressRouteGatewayBypass *bool `json:"expressRouteGatewayBypass,omitempty"`

	//IpsecPolicies: The IPSec Policies to be considered by this connection.
	IpsecPolicies []IpsecPolicy `json:"ipsecPolicies,omitempty"`

	//LocalNetworkGateway2: The reference to local network gateway resource.
	LocalNetworkGateway2 *SubResource `json:"localNetworkGateway2,omitempty"`

	//Peer: The reference to peerings resource.
	Peer *SubResource `json:"peer,omitempty"`

	//RoutingWeight: The routing weight.
	RoutingWeight *int `json:"routingWeight,omitempty"`

	//SharedKey: The IPSec shared key.
	SharedKey *string `json:"sharedKey,omitempty"`

	//TrafficSelectorPolicies: The Traffic Selector Policies to be considered by this
	//connection.
	TrafficSelectorPolicies []TrafficSelectorPolicy `json:"trafficSelectorPolicies,omitempty"`

	//UseLocalAzureIpAddress: Use private local Azure IP for the connection.
	UseLocalAzureIpAddress *bool `json:"useLocalAzureIpAddress,omitempty"`

	//UsePolicyBasedTrafficSelectors: Enable policy-based traffic selectors.
	UsePolicyBasedTrafficSelectors *bool `json:"usePolicyBasedTrafficSelectors,omitempty"`

	// +kubebuilder:validation:Required
	//VirtualNetworkGateway1: The reference to virtual network gateway resource.
	VirtualNetworkGateway1 SubResource `json:"virtualNetworkGateway1"`

	//VirtualNetworkGateway2: The reference to virtual network gateway resource.
	VirtualNetworkGateway2 *SubResource `json:"virtualNetworkGateway2,omitempty"`
}

//Generated from:
type VirtualNetworkGatewayConnectionPropertiesFormat_Status struct {

	//AuthorizationKey: The authorizationKey.
	AuthorizationKey *string `json:"authorizationKey,omitempty"`

	//ConnectionProtocol: Connection protocol used for this connection.
	ConnectionProtocol *ConnectionProtocol_Status `json:"connectionProtocol,omitempty"`

	//ConnectionStatus: Virtual Network Gateway connection status.
	ConnectionStatus *VirtualNetworkGatewayConnectionStatus_Status `json:"connectionStatus,omitempty"`

	// +kubebuilder:validation:Required
	//ConnectionType: Gateway connection type.
	ConnectionType VirtualNetworkGatewayConnectionType_Status `json:"connectionType"`

	//DpdTimeoutSeconds: The dead peer detection timeout of this connection in seconds.
	DpdTimeoutSeconds *int `json:"dpdTimeoutSeconds,omitempty"`

	//EgressBytesTransferred: The egress bytes transferred in this connection.
	EgressBytesTransferred *int `json:"egressBytesTransferred,omitempty"`

	//EnableBgp: EnableBgp flag.
	EnableBgp *bool `json:"enableBgp,omitempty"`

	//ExpressRouteGatewayBypass: Bypass ExpressRoute Gateway for data forwarding.
	ExpressRouteGatewayBypass *bool `json:"expressRouteGatewayBypass,omitempty"`

	//IngressBytesTransferred: The ingress bytes transferred in this connection.
	IngressBytesTransferred *int `json:"ingressBytesTransferred,omitempty"`

	//IpsecPolicies: The IPSec Policies to be considered by this connection.
	IpsecPolicies []IpsecPolicy_Status `json:"ipsecPolicies,omitempty"`

	//LocalNetworkGateway2: The reference to local network gateway resource.
	LocalNetworkGateway2 *LocalNetworkGateway_Status `json:"localNetworkGateway2,omitempty"`

	//Peer: The reference to peerings resource.
	Peer *SubResource_Status `json:"peer,omitempty"`

	//ProvisioningState: The provisioning state of the virtual network gateway
	//connection resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//ResourceGuid: The resource GUID property of the virtual network gateway
	//connection resource.
	ResourceGuid *string `json:"resourceGuid,omitempty"`

	//RoutingWeight: The routing weight.
	RoutingWeight *int `json:"routingWeight,omitempty"`

	//SharedKey: The IPSec shared key.
	SharedKey *string `json:"sharedKey,omitempty"`

	//TrafficSelectorPolicies: The Traffic Selector Policies to be considered by this
	//connection.
	TrafficSelectorPolicies []TrafficSelectorPolicy_Status `json:"trafficSelectorPolicies,omitempty"`

	//TunnelConnectionStatus: Collection of all tunnels' connection health status.
	TunnelConnectionStatus []TunnelConnectionHealth_Status `json:"tunnelConnectionStatus,omitempty"`

	//UseLocalAzureIpAddress: Use private local Azure IP for the connection.
	UseLocalAzureIpAddress *bool `json:"useLocalAzureIpAddress,omitempty"`

	//UsePolicyBasedTrafficSelectors: Enable policy-based traffic selectors.
	UsePolicyBasedTrafficSelectors *bool `json:"usePolicyBasedTrafficSelectors,omitempty"`

	// +kubebuilder:validation:Required
	//VirtualNetworkGateway1: The reference to virtual network gateway resource.
	VirtualNetworkGateway1 VirtualNetworkGateway_Status `json:"virtualNetworkGateway1"`

	//VirtualNetworkGateway2: The reference to virtual network gateway resource.
	VirtualNetworkGateway2 *VirtualNetworkGateway_Status `json:"virtualNetworkGateway2,omitempty"`
}

//Generated from:
// +kubebuilder:validation:Enum={"IKEv1","IKEv2"}
type ConnectionProtocol_Status string

const (
	ConnectionProtocol_StatusIKEv1 = ConnectionProtocol_Status("IKEv1")
	ConnectionProtocol_StatusIKEv2 = ConnectionProtocol_Status("IKEv2")
)

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/IpsecPolicy
type IpsecPolicy struct {

	// +kubebuilder:validation:Required
	//DhGroup: The DH Group used in IKE Phase 1 for initial SA.
	DhGroup IpsecPolicyDhGroup `json:"dhGroup"`

	// +kubebuilder:validation:Required
	//IkeEncryption: The IKE encryption algorithm (IKE phase 2).
	IkeEncryption IpsecPolicyIkeEncryption `json:"ikeEncryption"`

	// +kubebuilder:validation:Required
	//IkeIntegrity: The IKE integrity algorithm (IKE phase 2).
	IkeIntegrity IpsecPolicyIkeIntegrity `json:"ikeIntegrity"`

	// +kubebuilder:validation:Required
	//IpsecEncryption: The IPSec encryption algorithm (IKE phase 1).
	IpsecEncryption IpsecPolicyIpsecEncryption `json:"ipsecEncryption"`

	// +kubebuilder:validation:Required
	//IpsecIntegrity: The IPSec integrity algorithm (IKE phase 1).
	IpsecIntegrity IpsecPolicyIpsecIntegrity `json:"ipsecIntegrity"`

	// +kubebuilder:validation:Required
	//PfsGroup: The Pfs Group used in IKE Phase 2 for new child SA.
	PfsGroup IpsecPolicyPfsGroup `json:"pfsGroup"`

	// +kubebuilder:validation:Required
	//SaDataSizeKilobytes: The IPSec Security Association (also called Quick Mode or
	//Phase 2 SA) payload size in KB for a site to site VPN tunnel.
	SaDataSizeKilobytes int `json:"saDataSizeKilobytes"`

	// +kubebuilder:validation:Required
	//SaLifeTimeSeconds: The IPSec Security Association (also called Quick Mode or
	//Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
	SaLifeTimeSeconds int `json:"saLifeTimeSeconds"`
}

//Generated from:
type IpsecPolicy_Status struct {

	// +kubebuilder:validation:Required
	//DhGroup: The DH Group used in IKE Phase 1 for initial SA.
	DhGroup DhGroup_Status `json:"dhGroup"`

	// +kubebuilder:validation:Required
	//IkeEncryption: The IKE encryption algorithm (IKE phase 2).
	IkeEncryption IkeEncryption_Status `json:"ikeEncryption"`

	// +kubebuilder:validation:Required
	//IkeIntegrity: The IKE integrity algorithm (IKE phase 2).
	IkeIntegrity IkeIntegrity_Status `json:"ikeIntegrity"`

	// +kubebuilder:validation:Required
	//IpsecEncryption: The IPSec encryption algorithm (IKE phase 1).
	IpsecEncryption IpsecEncryption_Status `json:"ipsecEncryption"`

	// +kubebuilder:validation:Required
	//IpsecIntegrity: The IPSec integrity algorithm (IKE phase 1).
	IpsecIntegrity IpsecIntegrity_Status `json:"ipsecIntegrity"`

	// +kubebuilder:validation:Required
	//PfsGroup: The Pfs Group used in IKE Phase 2 for new child SA.
	PfsGroup PfsGroup_Status `json:"pfsGroup"`

	// +kubebuilder:validation:Required
	//SaDataSizeKilobytes: The IPSec Security Association (also called Quick Mode or
	//Phase 2 SA) payload size in KB for a site to site VPN tunnel.
	SaDataSizeKilobytes int `json:"saDataSizeKilobytes"`

	// +kubebuilder:validation:Required
	//SaLifeTimeSeconds: The IPSec Security Association (also called Quick Mode or
	//Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
	SaLifeTimeSeconds int `json:"saLifeTimeSeconds"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/TrafficSelectorPolicy
type TrafficSelectorPolicy struct {

	// +kubebuilder:validation:Required
	//LocalAddressRanges: A collection of local address spaces in CIDR format.
	LocalAddressRanges []string `json:"localAddressRanges"`

	// +kubebuilder:validation:Required
	//RemoteAddressRanges: A collection of remote address spaces in CIDR format.
	RemoteAddressRanges []string `json:"remoteAddressRanges"`
}

//Generated from:
type TrafficSelectorPolicy_Status struct {

	// +kubebuilder:validation:Required
	//LocalAddressRanges: A collection of local address spaces in CIDR format.
	LocalAddressRanges []string `json:"localAddressRanges"`

	// +kubebuilder:validation:Required
	//RemoteAddressRanges: A collection of remote address spaces in CIDR format.
	RemoteAddressRanges []string `json:"remoteAddressRanges"`
}

//Generated from:
type TunnelConnectionHealth_Status struct {

	//ConnectionStatus: Virtual Network Gateway connection status.
	ConnectionStatus *VirtualNetworkGatewayConnectionStatus_Status `json:"connectionStatus,omitempty"`

	//EgressBytesTransferred: The Egress Bytes Transferred in this connection.
	EgressBytesTransferred *int `json:"egressBytesTransferred,omitempty"`

	//IngressBytesTransferred: The Ingress Bytes Transferred in this connection.
	IngressBytesTransferred *int `json:"ingressBytesTransferred,omitempty"`

	//LastConnectionEstablishedUtcTime: The time at which connection was established
	//in Utc format.
	LastConnectionEstablishedUtcTime *string `json:"lastConnectionEstablishedUtcTime,omitempty"`

	//Tunnel: Tunnel name.
	Tunnel *string `json:"tunnel,omitempty"`
}

// +kubebuilder:validation:Enum={"IKEv1","IKEv2"}
type VirtualNetworkGatewayConnectionPropertiesFormatConnectionProtocol string

const (
	VirtualNetworkGatewayConnectionPropertiesFormatConnectionProtocolIKEv1 = VirtualNetworkGatewayConnectionPropertiesFormatConnectionProtocol("IKEv1")
	VirtualNetworkGatewayConnectionPropertiesFormatConnectionProtocolIKEv2 = VirtualNetworkGatewayConnectionPropertiesFormatConnectionProtocol("IKEv2")
)

// +kubebuilder:validation:Enum={"ExpressRoute","IPsec","VPNClient","Vnet2Vnet"}
type VirtualNetworkGatewayConnectionPropertiesFormatConnectionType string

const (
	VirtualNetworkGatewayConnectionPropertiesFormatConnectionTypeExpressRoute = VirtualNetworkGatewayConnectionPropertiesFormatConnectionType("ExpressRoute")
	VirtualNetworkGatewayConnectionPropertiesFormatConnectionTypeIPsec        = VirtualNetworkGatewayConnectionPropertiesFormatConnectionType("IPsec")
	VirtualNetworkGatewayConnectionPropertiesFormatConnectionTypeVPNClient    = VirtualNetworkGatewayConnectionPropertiesFormatConnectionType("VPNClient")
	VirtualNetworkGatewayConnectionPropertiesFormatConnectionTypeVnet2Vnet    = VirtualNetworkGatewayConnectionPropertiesFormatConnectionType("Vnet2Vnet")
)

//Generated from:
// +kubebuilder:validation:Enum={"Connected","Connecting","NotConnected","Unknown"}
type VirtualNetworkGatewayConnectionStatus_Status string

const (
	VirtualNetworkGatewayConnectionStatus_StatusConnected    = VirtualNetworkGatewayConnectionStatus_Status("Connected")
	VirtualNetworkGatewayConnectionStatus_StatusConnecting   = VirtualNetworkGatewayConnectionStatus_Status("Connecting")
	VirtualNetworkGatewayConnectionStatus_StatusNotConnected = VirtualNetworkGatewayConnectionStatus_Status("NotConnected")
	VirtualNetworkGatewayConnectionStatus_StatusUnknown      = VirtualNetworkGatewayConnectionStatus_Status("Unknown")
)

//Generated from:
// +kubebuilder:validation:Enum={"ExpressRoute","IPsec","VPNClient","Vnet2Vnet"}
type VirtualNetworkGatewayConnectionType_Status string

const (
	VirtualNetworkGatewayConnectionType_StatusExpressRoute = VirtualNetworkGatewayConnectionType_Status("ExpressRoute")
	VirtualNetworkGatewayConnectionType_StatusIPsec        = VirtualNetworkGatewayConnectionType_Status("IPsec")
	VirtualNetworkGatewayConnectionType_StatusVPNClient    = VirtualNetworkGatewayConnectionType_Status("VPNClient")
	VirtualNetworkGatewayConnectionType_StatusVnet2Vnet    = VirtualNetworkGatewayConnectionType_Status("Vnet2Vnet")
)

//Generated from:
// +kubebuilder:validation:Enum={"DHGroup1","DHGroup14","DHGroup2","DHGroup2048","DHGroup24","ECP256","ECP384","None"}
type DhGroup_Status string

const (
	DhGroup_StatusDHGroup1    = DhGroup_Status("DHGroup1")
	DhGroup_StatusDHGroup14   = DhGroup_Status("DHGroup14")
	DhGroup_StatusDHGroup2    = DhGroup_Status("DHGroup2")
	DhGroup_StatusDHGroup2048 = DhGroup_Status("DHGroup2048")
	DhGroup_StatusDHGroup24   = DhGroup_Status("DHGroup24")
	DhGroup_StatusECP256      = DhGroup_Status("ECP256")
	DhGroup_StatusECP384      = DhGroup_Status("ECP384")
	DhGroup_StatusNone        = DhGroup_Status("None")
)

//Generated from:
// +kubebuilder:validation:Enum={"AES128","AES192","AES256","DES","DES3","GCMAES128","GCMAES256"}
type IkeEncryption_Status string

const (
	IkeEncryption_StatusAES128    = IkeEncryption_Status("AES128")
	IkeEncryption_StatusAES192    = IkeEncryption_Status("AES192")
	IkeEncryption_StatusAES256    = IkeEncryption_Status("AES256")
	IkeEncryption_StatusDES       = IkeEncryption_Status("DES")
	IkeEncryption_StatusDES3      = IkeEncryption_Status("DES3")
	IkeEncryption_StatusGCMAES128 = IkeEncryption_Status("GCMAES128")
	IkeEncryption_StatusGCMAES256 = IkeEncryption_Status("GCMAES256")
)

//Generated from:
// +kubebuilder:validation:Enum={"GCMAES128","GCMAES256","MD5","SHA1","SHA256","SHA384"}
type IkeIntegrity_Status string

const (
	IkeIntegrity_StatusGCMAES128 = IkeIntegrity_Status("GCMAES128")
	IkeIntegrity_StatusGCMAES256 = IkeIntegrity_Status("GCMAES256")
	IkeIntegrity_StatusMD5       = IkeIntegrity_Status("MD5")
	IkeIntegrity_StatusSHA1      = IkeIntegrity_Status("SHA1")
	IkeIntegrity_StatusSHA256    = IkeIntegrity_Status("SHA256")
	IkeIntegrity_StatusSHA384    = IkeIntegrity_Status("SHA384")
)

//Generated from:
// +kubebuilder:validation:Enum={"AES128","AES192","AES256","DES","DES3","GCMAES128","GCMAES192","GCMAES256","None"}
type IpsecEncryption_Status string

const (
	IpsecEncryption_StatusAES128    = IpsecEncryption_Status("AES128")
	IpsecEncryption_StatusAES192    = IpsecEncryption_Status("AES192")
	IpsecEncryption_StatusAES256    = IpsecEncryption_Status("AES256")
	IpsecEncryption_StatusDES       = IpsecEncryption_Status("DES")
	IpsecEncryption_StatusDES3      = IpsecEncryption_Status("DES3")
	IpsecEncryption_StatusGCMAES128 = IpsecEncryption_Status("GCMAES128")
	IpsecEncryption_StatusGCMAES192 = IpsecEncryption_Status("GCMAES192")
	IpsecEncryption_StatusGCMAES256 = IpsecEncryption_Status("GCMAES256")
	IpsecEncryption_StatusNone      = IpsecEncryption_Status("None")
)

//Generated from:
// +kubebuilder:validation:Enum={"GCMAES128","GCMAES192","GCMAES256","MD5","SHA1","SHA256"}
type IpsecIntegrity_Status string

const (
	IpsecIntegrity_StatusGCMAES128 = IpsecIntegrity_Status("GCMAES128")
	IpsecIntegrity_StatusGCMAES192 = IpsecIntegrity_Status("GCMAES192")
	IpsecIntegrity_StatusGCMAES256 = IpsecIntegrity_Status("GCMAES256")
	IpsecIntegrity_StatusMD5       = IpsecIntegrity_Status("MD5")
	IpsecIntegrity_StatusSHA1      = IpsecIntegrity_Status("SHA1")
	IpsecIntegrity_StatusSHA256    = IpsecIntegrity_Status("SHA256")
)

// +kubebuilder:validation:Enum={"DHGroup1","DHGroup14","DHGroup2","DHGroup2048","DHGroup24","ECP256","ECP384","None"}
type IpsecPolicyDhGroup string

const (
	IpsecPolicyDhGroupDHGroup1    = IpsecPolicyDhGroup("DHGroup1")
	IpsecPolicyDhGroupDHGroup14   = IpsecPolicyDhGroup("DHGroup14")
	IpsecPolicyDhGroupDHGroup2    = IpsecPolicyDhGroup("DHGroup2")
	IpsecPolicyDhGroupDHGroup2048 = IpsecPolicyDhGroup("DHGroup2048")
	IpsecPolicyDhGroupDHGroup24   = IpsecPolicyDhGroup("DHGroup24")
	IpsecPolicyDhGroupECP256      = IpsecPolicyDhGroup("ECP256")
	IpsecPolicyDhGroupECP384      = IpsecPolicyDhGroup("ECP384")
	IpsecPolicyDhGroupNone        = IpsecPolicyDhGroup("None")
)

// +kubebuilder:validation:Enum={"AES128","AES192","AES256","DES","DES3","GCMAES128","GCMAES256"}
type IpsecPolicyIkeEncryption string

const (
	IpsecPolicyIkeEncryptionAES128    = IpsecPolicyIkeEncryption("AES128")
	IpsecPolicyIkeEncryptionAES192    = IpsecPolicyIkeEncryption("AES192")
	IpsecPolicyIkeEncryptionAES256    = IpsecPolicyIkeEncryption("AES256")
	IpsecPolicyIkeEncryptionDES       = IpsecPolicyIkeEncryption("DES")
	IpsecPolicyIkeEncryptionDES3      = IpsecPolicyIkeEncryption("DES3")
	IpsecPolicyIkeEncryptionGCMAES128 = IpsecPolicyIkeEncryption("GCMAES128")
	IpsecPolicyIkeEncryptionGCMAES256 = IpsecPolicyIkeEncryption("GCMAES256")
)

// +kubebuilder:validation:Enum={"GCMAES128","GCMAES256","MD5","SHA1","SHA256","SHA384"}
type IpsecPolicyIkeIntegrity string

const (
	IpsecPolicyIkeIntegrityGCMAES128 = IpsecPolicyIkeIntegrity("GCMAES128")
	IpsecPolicyIkeIntegrityGCMAES256 = IpsecPolicyIkeIntegrity("GCMAES256")
	IpsecPolicyIkeIntegrityMD5       = IpsecPolicyIkeIntegrity("MD5")
	IpsecPolicyIkeIntegritySHA1      = IpsecPolicyIkeIntegrity("SHA1")
	IpsecPolicyIkeIntegritySHA256    = IpsecPolicyIkeIntegrity("SHA256")
	IpsecPolicyIkeIntegritySHA384    = IpsecPolicyIkeIntegrity("SHA384")
)

// +kubebuilder:validation:Enum={"AES128","AES192","AES256","DES","DES3","GCMAES128","GCMAES192","GCMAES256","None"}
type IpsecPolicyIpsecEncryption string

const (
	IpsecPolicyIpsecEncryptionAES128    = IpsecPolicyIpsecEncryption("AES128")
	IpsecPolicyIpsecEncryptionAES192    = IpsecPolicyIpsecEncryption("AES192")
	IpsecPolicyIpsecEncryptionAES256    = IpsecPolicyIpsecEncryption("AES256")
	IpsecPolicyIpsecEncryptionDES       = IpsecPolicyIpsecEncryption("DES")
	IpsecPolicyIpsecEncryptionDES3      = IpsecPolicyIpsecEncryption("DES3")
	IpsecPolicyIpsecEncryptionGCMAES128 = IpsecPolicyIpsecEncryption("GCMAES128")
	IpsecPolicyIpsecEncryptionGCMAES192 = IpsecPolicyIpsecEncryption("GCMAES192")
	IpsecPolicyIpsecEncryptionGCMAES256 = IpsecPolicyIpsecEncryption("GCMAES256")
	IpsecPolicyIpsecEncryptionNone      = IpsecPolicyIpsecEncryption("None")
)

// +kubebuilder:validation:Enum={"GCMAES128","GCMAES192","GCMAES256","MD5","SHA1","SHA256"}
type IpsecPolicyIpsecIntegrity string

const (
	IpsecPolicyIpsecIntegrityGCMAES128 = IpsecPolicyIpsecIntegrity("GCMAES128")
	IpsecPolicyIpsecIntegrityGCMAES192 = IpsecPolicyIpsecIntegrity("GCMAES192")
	IpsecPolicyIpsecIntegrityGCMAES256 = IpsecPolicyIpsecIntegrity("GCMAES256")
	IpsecPolicyIpsecIntegrityMD5       = IpsecPolicyIpsecIntegrity("MD5")
	IpsecPolicyIpsecIntegritySHA1      = IpsecPolicyIpsecIntegrity("SHA1")
	IpsecPolicyIpsecIntegritySHA256    = IpsecPolicyIpsecIntegrity("SHA256")
)

// +kubebuilder:validation:Enum={"ECP256","ECP384","None","PFS1","PFS14","PFS2","PFS2048","PFS24","PFSMM"}
type IpsecPolicyPfsGroup string

const (
	IpsecPolicyPfsGroupECP256  = IpsecPolicyPfsGroup("ECP256")
	IpsecPolicyPfsGroupECP384  = IpsecPolicyPfsGroup("ECP384")
	IpsecPolicyPfsGroupNone    = IpsecPolicyPfsGroup("None")
	IpsecPolicyPfsGroupPFS1    = IpsecPolicyPfsGroup("PFS1")
	IpsecPolicyPfsGroupPFS14   = IpsecPolicyPfsGroup("PFS14")
	IpsecPolicyPfsGroupPFS2    = IpsecPolicyPfsGroup("PFS2")
	IpsecPolicyPfsGroupPFS2048 = IpsecPolicyPfsGroup("PFS2048")
	IpsecPolicyPfsGroupPFS24   = IpsecPolicyPfsGroup("PFS24")
	IpsecPolicyPfsGroupPFSMM   = IpsecPolicyPfsGroup("PFSMM")
)

//Generated from:
// +kubebuilder:validation:Enum={"ECP256","ECP384","None","PFS1","PFS14","PFS2","PFS2048","PFS24","PFSMM"}
type PfsGroup_Status string

const (
	PfsGroup_StatusECP256  = PfsGroup_Status("ECP256")
	PfsGroup_StatusECP384  = PfsGroup_Status("ECP384")
	PfsGroup_StatusNone    = PfsGroup_Status("None")
	PfsGroup_StatusPFS1    = PfsGroup_Status("PFS1")
	PfsGroup_StatusPFS14   = PfsGroup_Status("PFS14")
	PfsGroup_StatusPFS2    = PfsGroup_Status("PFS2")
	PfsGroup_StatusPFS2048 = PfsGroup_Status("PFS2048")
	PfsGroup_StatusPFS24   = PfsGroup_Status("PFS24")
	PfsGroup_StatusPFSMM   = PfsGroup_Status("PFSMM")
)

func init() {
	SchemeBuilder.Register(&Connections{}, &ConnectionsList{})
}
