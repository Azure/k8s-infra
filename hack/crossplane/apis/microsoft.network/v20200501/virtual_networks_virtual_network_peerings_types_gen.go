// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200501

import (
	"github.com/Azure/k8s-infra/hack/crossplane/apis/deploymenttemplate/v20150101"
	"github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
type VirtualNetworksVirtualNetworkPeerings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualNetworksVirtualNetworkPeerings_Spec `json:"spec,omitempty"`
	Status            VirtualNetworkPeering_Status               `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type VirtualNetworksVirtualNetworkPeeringsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualNetworksVirtualNetworkPeerings `json:"items"`
}

type VirtualNetworkPeering_Status struct {
	v1alpha1.ResourceStatus `json:",inline"`
	AtProvider              VirtualNetworksVirtualNetworkPeeringsObservation `json:"atProvider"`
}

type VirtualNetworksVirtualNetworkPeerings_Spec struct {
	v1alpha1.ResourceSpec `json:",inline"`
	ForProvider           VirtualNetworksVirtualNetworkPeeringsParameters `json:"forProvider"`
}

type VirtualNetworksVirtualNetworkPeeringsObservation struct {

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//Properties: Properties of the virtual network peering.
	Properties *VirtualNetworkPeeringPropertiesFormat_Status `json:"properties,omitempty"`
}

type VirtualNetworksVirtualNetworkPeeringsParameters struct {

	// +kubebuilder:validation:Required
	//ApiVersion: API Version of the resource type, optional when apiProfile is used
	//on the template
	ApiVersion VirtualNetworksVirtualNetworkPeeringsSpecApiVersion `json:"apiVersion"`
	Comments   *string                                             `json:"comments,omitempty"`

	//Condition: Condition of the resource
	Condition *bool                   `json:"condition,omitempty"`
	Copy      *v20150101.ResourceCopy `json:"copy,omitempty"`

	//DependsOn: Collection of resources this resource depends on
	DependsOn []string `json:"dependsOn,omitempty"`

	//Location: Location to deploy resource to
	Location *v20150101.ResourceLocations `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the resource
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Properties: Properties of the virtual network peering.
	Properties VirtualNetworkPeeringPropertiesFormat `json:"properties"`

	//Scope: Scope for the resource or deployment. Today, this works for two cases: 1)
	//setting the scope for extension resources 2) deploying resources to the tenant
	//scope in non-tenant scope deployments
	Scope *string `json:"scope,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// +kubebuilder:validation:Required
	//Type: Resource type
	Type VirtualNetworksVirtualNetworkPeeringsSpecType `json:"type"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/VirtualNetworkPeeringPropertiesFormat
type VirtualNetworkPeeringPropertiesFormat struct {

	//AllowForwardedTraffic: Whether the forwarded traffic from the VMs in the local
	//virtual network will be allowed/disallowed in remote virtual network.
	AllowForwardedTraffic *bool `json:"allowForwardedTraffic,omitempty"`

	//AllowGatewayTransit: If gateway links can be used in remote virtual networking
	//to link to this virtual network.
	AllowGatewayTransit *bool `json:"allowGatewayTransit,omitempty"`

	//AllowVirtualNetworkAccess: Whether the VMs in the local virtual network space
	//would be able to access the VMs in remote virtual network space.
	AllowVirtualNetworkAccess *bool `json:"allowVirtualNetworkAccess,omitempty"`

	//PeeringState: The status of the virtual network peering.
	PeeringState *VirtualNetworkPeeringPropertiesFormatPeeringState `json:"peeringState,omitempty"`

	//RemoteAddressSpace: The reference to the remote virtual network address space.
	RemoteAddressSpace *AddressSpace `json:"remoteAddressSpace,omitempty"`

	// +kubebuilder:validation:Required
	//RemoteVirtualNetwork: The reference to the remote virtual network. The remote
	//virtual network can be in the same or different region (preview). See here to
	//register for the preview and learn more
	//(https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
	RemoteVirtualNetwork SubResource `json:"remoteVirtualNetwork"`

	//UseRemoteGateways: If remote gateways can be used on this virtual network. If
	//the flag is set to true, and allowGatewayTransit on remote peering is also true,
	//virtual network will use gateways of remote virtual network for transit. Only
	//one peering can have this flag set to true. This flag cannot be set if virtual
	//network already has a gateway.
	UseRemoteGateways *bool `json:"useRemoteGateways,omitempty"`
}

//Generated from:
type VirtualNetworkPeeringPropertiesFormat_Status struct {

	//AllowForwardedTraffic: Whether the forwarded traffic from the VMs in the local
	//virtual network will be allowed/disallowed in remote virtual network.
	AllowForwardedTraffic *bool `json:"allowForwardedTraffic,omitempty"`

	//AllowGatewayTransit: If gateway links can be used in remote virtual networking
	//to link to this virtual network.
	AllowGatewayTransit *bool `json:"allowGatewayTransit,omitempty"`

	//AllowVirtualNetworkAccess: Whether the VMs in the local virtual network space
	//would be able to access the VMs in remote virtual network space.
	AllowVirtualNetworkAccess *bool `json:"allowVirtualNetworkAccess,omitempty"`

	//PeeringState: The status of the virtual network peering.
	PeeringState *VirtualNetworkPeeringPropertiesFormatStatusPeeringState `json:"peeringState,omitempty"`

	//ProvisioningState: The provisioning state of the virtual network peering
	//resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//RemoteAddressSpace: The reference to the remote virtual network address space.
	RemoteAddressSpace *AddressSpace_Status `json:"remoteAddressSpace,omitempty"`

	//RemoteVirtualNetwork: The reference to the remote virtual network. The remote
	//virtual network can be in the same or different region (preview). See here to
	//register for the preview and learn more
	//(https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
	RemoteVirtualNetwork *SubResource_Status `json:"remoteVirtualNetwork,omitempty"`

	//UseRemoteGateways: If remote gateways can be used on this virtual network. If
	//the flag is set to true, and allowGatewayTransit on remote peering is also true,
	//virtual network will use gateways of remote virtual network for transit. Only
	//one peering can have this flag set to true. This flag cannot be set if virtual
	//network already has a gateway.
	UseRemoteGateways *bool `json:"useRemoteGateways,omitempty"`
}

// +kubebuilder:validation:Enum={"2020-05-01"}
type VirtualNetworksVirtualNetworkPeeringsSpecApiVersion string

const VirtualNetworksVirtualNetworkPeeringsSpecApiVersion20200501 = VirtualNetworksVirtualNetworkPeeringsSpecApiVersion("2020-05-01")

// +kubebuilder:validation:Enum={"Microsoft.Network/virtualNetworks/virtualNetworkPeerings"}
type VirtualNetworksVirtualNetworkPeeringsSpecType string

const VirtualNetworksVirtualNetworkPeeringsSpecTypeMicrosoftNetworkVirtualNetworksVirtualNetworkPeerings = VirtualNetworksVirtualNetworkPeeringsSpecType("Microsoft.Network/virtualNetworks/virtualNetworkPeerings")

// +kubebuilder:validation:Enum={"Connected","Disconnected","Initiated"}
type VirtualNetworkPeeringPropertiesFormatPeeringState string

const (
	VirtualNetworkPeeringPropertiesFormatPeeringStateConnected    = VirtualNetworkPeeringPropertiesFormatPeeringState("Connected")
	VirtualNetworkPeeringPropertiesFormatPeeringStateDisconnected = VirtualNetworkPeeringPropertiesFormatPeeringState("Disconnected")
	VirtualNetworkPeeringPropertiesFormatPeeringStateInitiated    = VirtualNetworkPeeringPropertiesFormatPeeringState("Initiated")
)

// +kubebuilder:validation:Enum={"Connected","Disconnected","Initiated"}
type VirtualNetworkPeeringPropertiesFormatStatusPeeringState string

const (
	VirtualNetworkPeeringPropertiesFormatStatusPeeringStateConnected    = VirtualNetworkPeeringPropertiesFormatStatusPeeringState("Connected")
	VirtualNetworkPeeringPropertiesFormatStatusPeeringStateDisconnected = VirtualNetworkPeeringPropertiesFormatStatusPeeringState("Disconnected")
	VirtualNetworkPeeringPropertiesFormatStatusPeeringStateInitiated    = VirtualNetworkPeeringPropertiesFormatStatusPeeringState("Initiated")
)

func init() {
	SchemeBuilder.Register(&VirtualNetworksVirtualNetworkPeerings{}, &VirtualNetworksVirtualNetworkPeeringsList{})
}
