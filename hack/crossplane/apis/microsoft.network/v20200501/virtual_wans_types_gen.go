// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200501

import (
	"fmt"
	"github.com/Azure/k8s-infra/hack/generated/apis/deploymenttemplate/v20150101"
	"github.com/Azure/k8s-infra/hack/generated/pkg/genruntime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
type VirtualWans struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualWans_Spec  `json:"spec,omitempty"`
	Status            VirtualWAN_Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type VirtualWansList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualWans `json:"items"`
}

//Generated from:
type VirtualWAN_Status struct {

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//Properties: Properties of the virtual WAN.
	Properties *VirtualWanProperties_Status `json:"properties,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

type VirtualWans_Spec struct {
	ForProvider VirtualWansParameters `json:"forProvider"`
}

//Generated from:
type VirtualWanProperties_Status struct {

	//AllowBranchToBranchTraffic: True if branch to branch traffic is allowed.
	AllowBranchToBranchTraffic *bool `json:"allowBranchToBranchTraffic,omitempty"`

	//AllowVnetToVnetTraffic: True if Vnet to Vnet traffic is allowed.
	AllowVnetToVnetTraffic *bool `json:"allowVnetToVnetTraffic,omitempty"`

	//DisableVpnEncryption: Vpn encryption to be disabled or not.
	DisableVpnEncryption *bool `json:"disableVpnEncryption,omitempty"`

	//Office365LocalBreakoutCategory: The office local breakout category.
	Office365LocalBreakoutCategory *OfficeTrafficCategory_Status `json:"office365LocalBreakoutCategory,omitempty"`

	//ProvisioningState: The provisioning state of the virtual WAN resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//Type: The type of the VirtualWAN.
	Type *string `json:"type,omitempty"`

	//VirtualHubs: List of VirtualHubs in the VirtualWAN.
	VirtualHubs []SubResource_Status `json:"virtualHubs,omitempty"`

	//VpnSites: List of VpnSites in the VirtualWAN.
	VpnSites []SubResource_Status `json:"vpnSites,omitempty"`
}

type VirtualWansParameters struct {

	// +kubebuilder:validation:Required
	//ApiVersion: API Version of the resource type, optional when apiProfile is used
	//on the template
	ApiVersion VirtualWansSpecApiVersion `json:"apiVersion"`
	Comments   *string                   `json:"comments,omitempty"`

	//Condition: Condition of the resource
	Condition *bool                   `json:"condition,omitempty"`
	Copy      *v20150101.ResourceCopy `json:"copy,omitempty"`

	//DependsOn: Collection of resources this resource depends on
	DependsOn []string `json:"dependsOn,omitempty"`

	//Location: Location to deploy resource to
	Location string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the resource
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Properties: Properties of the virtual WAN.
	Properties VirtualWanProperties `json:"properties"`

	//Scope: Scope for the resource or deployment. Today, this works for two cases: 1)
	//setting the scope for extension resources 2) deploying resources to the tenant
	//scope in non-tenant scope deployments
	Scope *string `json:"scope,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// +kubebuilder:validation:Required
	//Type: Resource type
	Type VirtualWansSpecType `json:"type"`
}

//Generated from:
// +kubebuilder:validation:Enum={"All","None","Optimize","OptimizeAndAllow"}
type OfficeTrafficCategory_Status string

const (
	OfficeTrafficCategory_StatusAll              = OfficeTrafficCategory_Status("All")
	OfficeTrafficCategory_StatusNone             = OfficeTrafficCategory_Status("None")
	OfficeTrafficCategory_StatusOptimize         = OfficeTrafficCategory_Status("Optimize")
	OfficeTrafficCategory_StatusOptimizeAndAllow = OfficeTrafficCategory_Status("OptimizeAndAllow")
)

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/VirtualWanProperties
type VirtualWanProperties struct {

	//AllowBranchToBranchTraffic: True if branch to branch traffic is allowed.
	AllowBranchToBranchTraffic *bool `json:"allowBranchToBranchTraffic,omitempty"`

	//AllowVnetToVnetTraffic: True if Vnet to Vnet traffic is allowed.
	AllowVnetToVnetTraffic *bool `json:"allowVnetToVnetTraffic,omitempty"`

	//DisableVpnEncryption: Vpn encryption to be disabled or not.
	DisableVpnEncryption *bool `json:"disableVpnEncryption,omitempty"`

	//Office365LocalBreakoutCategory: The office local breakout category.
	Office365LocalBreakoutCategory *VirtualWanPropertiesOffice365LocalBreakoutCategory `json:"office365LocalBreakoutCategory,omitempty"`

	//Type: The type of the VirtualWAN.
	Type *string `json:"type,omitempty"`
}

// +kubebuilder:validation:Enum={"2020-05-01"}
type VirtualWansSpecApiVersion string

const VirtualWansSpecApiVersion20200501 = VirtualWansSpecApiVersion("2020-05-01")

// +kubebuilder:validation:Enum={"Microsoft.Network/virtualWans"}
type VirtualWansSpecType string

const VirtualWansSpecTypeMicrosoftNetworkVirtualWans = VirtualWansSpecType("Microsoft.Network/virtualWans")

// +kubebuilder:validation:Enum={"All","None","Optimize","OptimizeAndAllow"}
type VirtualWanPropertiesOffice365LocalBreakoutCategory string

const (
	VirtualWanPropertiesOffice365LocalBreakoutCategoryAll              = VirtualWanPropertiesOffice365LocalBreakoutCategory("All")
	VirtualWanPropertiesOffice365LocalBreakoutCategoryNone             = VirtualWanPropertiesOffice365LocalBreakoutCategory("None")
	VirtualWanPropertiesOffice365LocalBreakoutCategoryOptimize         = VirtualWanPropertiesOffice365LocalBreakoutCategory("Optimize")
	VirtualWanPropertiesOffice365LocalBreakoutCategoryOptimizeAndAllow = VirtualWanPropertiesOffice365LocalBreakoutCategory("OptimizeAndAllow")
)

func init() {
	SchemeBuilder.Register(&VirtualWans{}, &VirtualWansList{})
}
