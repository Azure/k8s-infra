// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200501

import (
	"fmt"
	"github.com/Azure/k8s-infra/hack/generated/apis/deploymenttemplate/v20150101"
	"github.com/Azure/k8s-infra/hack/generated/pkg/genruntime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
type RouteTablesRoutes struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteTablesRoutes_Spec `json:"spec,omitempty"`
	Status            Route_Status           `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type RouteTablesRoutesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouteTablesRoutes `json:"items"`
}

type RouteTablesRoutes_Spec struct {
	ForProvider RouteTablesRoutesParameters `json:"forProvider"`
}

type Route_Status struct {
	AtProvider RouteTablesRoutesObservation `json:"atProvider"`
}

type RouteTablesRoutesObservation struct {

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//Properties: Properties of the route.
	Properties *RoutePropertiesFormat_Status `json:"properties,omitempty"`
}

type RouteTablesRoutesParameters struct {

	// +kubebuilder:validation:Required
	//ApiVersion: API Version of the resource type, optional when apiProfile is used
	//on the template
	ApiVersion RouteTablesRoutesSpecApiVersion `json:"apiVersion"`
	Comments   *string                         `json:"comments,omitempty"`

	//Condition: Condition of the resource
	Condition *bool                   `json:"condition,omitempty"`
	Copy      *v20150101.ResourceCopy `json:"copy,omitempty"`

	//DependsOn: Collection of resources this resource depends on
	DependsOn []string `json:"dependsOn,omitempty"`

	//Location: Location to deploy resource to
	Location *v20150101.ResourceLocations `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the resource
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Properties: Properties of the route.
	Properties RoutePropertiesFormat `json:"properties"`

	//Scope: Scope for the resource or deployment. Today, this works for two cases: 1)
	//setting the scope for extension resources 2) deploying resources to the tenant
	//scope in non-tenant scope deployments
	Scope *string `json:"scope,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// +kubebuilder:validation:Required
	//Type: Resource type
	Type RouteTablesRoutesSpecType `json:"type"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/RoutePropertiesFormat
type RoutePropertiesFormat struct {

	// +kubebuilder:validation:Required
	//AddressPrefix: The destination CIDR to which the route applies.
	AddressPrefix string `json:"addressPrefix"`

	//NextHopIpAddress: The IP address packets should be forwarded to. Next hop values
	//are only allowed in routes where the next hop type is VirtualAppliance.
	NextHopIpAddress *string `json:"nextHopIpAddress,omitempty"`

	// +kubebuilder:validation:Required
	//NextHopType: The type of Azure hop the packet should be sent to.
	NextHopType RoutePropertiesFormatNextHopType `json:"nextHopType"`
}

//Generated from:
type RoutePropertiesFormat_Status struct {

	//AddressPrefix: The destination CIDR to which the route applies.
	AddressPrefix *string `json:"addressPrefix,omitempty"`

	//NextHopIpAddress: The IP address packets should be forwarded to. Next hop values
	//are only allowed in routes where the next hop type is VirtualAppliance.
	NextHopIpAddress *string `json:"nextHopIpAddress,omitempty"`

	// +kubebuilder:validation:Required
	//NextHopType: The type of Azure hop the packet should be sent to.
	NextHopType RouteNextHopType_Status `json:"nextHopType"`

	//ProvisioningState: The provisioning state of the route resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`
}

// +kubebuilder:validation:Enum={"2020-05-01"}
type RouteTablesRoutesSpecApiVersion string

const RouteTablesRoutesSpecApiVersion20200501 = RouteTablesRoutesSpecApiVersion("2020-05-01")

// +kubebuilder:validation:Enum={"Microsoft.Network/routeTables/routes"}
type RouteTablesRoutesSpecType string

const RouteTablesRoutesSpecTypeMicrosoftNetworkRouteTablesRoutes = RouteTablesRoutesSpecType("Microsoft.Network/routeTables/routes")

//Generated from:
// +kubebuilder:validation:Enum={"Internet","None","VirtualAppliance","VirtualNetworkGateway","VnetLocal"}
type RouteNextHopType_Status string

const (
	RouteNextHopType_StatusInternet              = RouteNextHopType_Status("Internet")
	RouteNextHopType_StatusNone                  = RouteNextHopType_Status("None")
	RouteNextHopType_StatusVirtualAppliance      = RouteNextHopType_Status("VirtualAppliance")
	RouteNextHopType_StatusVirtualNetworkGateway = RouteNextHopType_Status("VirtualNetworkGateway")
	RouteNextHopType_StatusVnetLocal             = RouteNextHopType_Status("VnetLocal")
)

// +kubebuilder:validation:Enum={"Internet","None","VirtualAppliance","VirtualNetworkGateway","VnetLocal"}
type RoutePropertiesFormatNextHopType string

const (
	RoutePropertiesFormatNextHopTypeInternet              = RoutePropertiesFormatNextHopType("Internet")
	RoutePropertiesFormatNextHopTypeNone                  = RoutePropertiesFormatNextHopType("None")
	RoutePropertiesFormatNextHopTypeVirtualAppliance      = RoutePropertiesFormatNextHopType("VirtualAppliance")
	RoutePropertiesFormatNextHopTypeVirtualNetworkGateway = RoutePropertiesFormatNextHopType("VirtualNetworkGateway")
	RoutePropertiesFormatNextHopTypeVnetLocal             = RoutePropertiesFormatNextHopType("VnetLocal")
)

func init() {
	SchemeBuilder.Register(&RouteTablesRoutes{}, &RouteTablesRoutesList{})
}
