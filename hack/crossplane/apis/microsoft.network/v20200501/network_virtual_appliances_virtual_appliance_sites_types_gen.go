// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200501

import (
	"fmt"
	"github.com/Azure/k8s-infra/hack/generated/apis/deploymenttemplate/v20150101"
	"github.com/Azure/k8s-infra/hack/generated/pkg/genruntime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
type NetworkVirtualAppliancesVirtualApplianceSites struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkVirtualAppliancesVirtualApplianceSites_Spec `json:"spec,omitempty"`
	Status            VirtualApplianceSite_Status                        `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type NetworkVirtualAppliancesVirtualApplianceSitesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkVirtualAppliancesVirtualApplianceSites `json:"items"`
}

type NetworkVirtualAppliancesVirtualApplianceSites_Spec struct {
	ForProvider NetworkVirtualAppliancesVirtualApplianceSitesParameters `json:"forProvider"`
}

type VirtualApplianceSite_Status struct {
	AtProvider NetworkVirtualAppliancesVirtualApplianceSitesObservation `json:"atProvider"`
}

type NetworkVirtualAppliancesVirtualApplianceSitesObservation struct {

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: Name of the virtual appliance site.
	Name *string `json:"name,omitempty"`

	//Properties: The properties of the Virtual Appliance Sites.
	Properties *VirtualApplianceSiteProperties_Status `json:"properties,omitempty"`

	//Type: Site type.
	Type *string `json:"type,omitempty"`
}

type NetworkVirtualAppliancesVirtualApplianceSitesParameters struct {

	// +kubebuilder:validation:Required
	//ApiVersion: API Version of the resource type, optional when apiProfile is used
	//on the template
	ApiVersion NetworkVirtualAppliancesVirtualApplianceSitesSpecApiVersion `json:"apiVersion"`
	Comments   *string                                                     `json:"comments,omitempty"`

	//Condition: Condition of the resource
	Condition *bool                   `json:"condition,omitempty"`
	Copy      *v20150101.ResourceCopy `json:"copy,omitempty"`

	//DependsOn: Collection of resources this resource depends on
	DependsOn []string `json:"dependsOn,omitempty"`

	//Location: Location to deploy resource to
	Location *v20150101.ResourceLocations `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the resource
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Properties: The properties of the Virtual Appliance Sites.
	Properties VirtualApplianceSiteProperties `json:"properties"`

	//Scope: Scope for the resource or deployment. Today, this works for two cases: 1)
	//setting the scope for extension resources 2) deploying resources to the tenant
	//scope in non-tenant scope deployments
	Scope *string `json:"scope,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// +kubebuilder:validation:Required
	//Type: Resource type
	Type NetworkVirtualAppliancesVirtualApplianceSitesSpecType `json:"type"`
}

// +kubebuilder:validation:Enum={"2020-05-01"}
type NetworkVirtualAppliancesVirtualApplianceSitesSpecApiVersion string

const NetworkVirtualAppliancesVirtualApplianceSitesSpecApiVersion20200501 = NetworkVirtualAppliancesVirtualApplianceSitesSpecApiVersion("2020-05-01")

// +kubebuilder:validation:Enum={"Microsoft.Network/networkVirtualAppliances/virtualApplianceSites"}
type NetworkVirtualAppliancesVirtualApplianceSitesSpecType string

const NetworkVirtualAppliancesVirtualApplianceSitesSpecTypeMicrosoftNetworkNetworkVirtualAppliancesVirtualApplianceSites = NetworkVirtualAppliancesVirtualApplianceSitesSpecType("Microsoft.Network/networkVirtualAppliances/virtualApplianceSites")

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/VirtualApplianceSiteProperties
type VirtualApplianceSiteProperties struct {

	//AddressPrefix: Address Prefix.
	AddressPrefix *string `json:"addressPrefix,omitempty"`

	//O365Policy: Office 365 Policy.
	O365Policy *Office365PolicyProperties `json:"o365Policy,omitempty"`
}

//Generated from:
type VirtualApplianceSiteProperties_Status struct {

	//AddressPrefix: Address Prefix.
	AddressPrefix *string `json:"addressPrefix,omitempty"`

	//O365Policy: Office 365 Policy.
	O365Policy *Office365PolicyProperties_Status `json:"o365Policy,omitempty"`

	//ProvisioningState: The provisioning state of the resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/Office365PolicyProperties
type Office365PolicyProperties struct {

	//BreakOutCategories: Office 365 breakout categories.
	BreakOutCategories *BreakOutCategoryPolicies `json:"breakOutCategories,omitempty"`
}

//Generated from:
type Office365PolicyProperties_Status struct {

	//BreakOutCategories: Office 365 breakout categories.
	BreakOutCategories *BreakOutCategoryPolicies_Status `json:"breakOutCategories,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/BreakOutCategoryPolicies
type BreakOutCategoryPolicies struct {

	//Allow: Flag to control breakout of o365 allow category.
	Allow *bool `json:"allow,omitempty"`

	//Default: Flag to control breakout of o365 default category.
	Default *bool `json:"default,omitempty"`

	//Optimize: Flag to control breakout of o365 optimize category.
	Optimize *bool `json:"optimize,omitempty"`
}

//Generated from:
type BreakOutCategoryPolicies_Status struct {

	//Allow: Flag to control breakout of o365 allow category.
	Allow *bool `json:"allow,omitempty"`

	//Default: Flag to control breakout of o365 default category.
	Default *bool `json:"default,omitempty"`

	//Optimize: Flag to control breakout of o365 optimize category.
	Optimize *bool `json:"optimize,omitempty"`
}

func init() {
	SchemeBuilder.Register(&NetworkVirtualAppliancesVirtualApplianceSites{}, &NetworkVirtualAppliancesVirtualApplianceSitesList{})
}
