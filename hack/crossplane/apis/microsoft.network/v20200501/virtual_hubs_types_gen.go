// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200501

import (
	"github.com/Azure/k8s-infra/hack/crossplane/apis/deploymenttemplate/v20150101"
	"github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
type VirtualHubs struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualHubs_Spec  `json:"spec,omitempty"`
	Status            VirtualHub_Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type VirtualHubsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualHubs `json:"items"`
}

type VirtualHub_Status struct {
	v1alpha1.ResourceStatus `json:",inline"`
	AtProvider              VirtualHubsObservation `json:"atProvider"`
}

type VirtualHubs_Spec struct {
	v1alpha1.ResourceSpec `json:",inline"`
	ForProvider           VirtualHubsParameters `json:"forProvider"`
}

type VirtualHubsObservation struct {

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//Properties: Properties of the virtual hub.
	Properties *VirtualHubProperties_Status `json:"properties,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

type VirtualHubsParameters struct {

	// +kubebuilder:validation:Required
	//ApiVersion: API Version of the resource type, optional when apiProfile is used
	//on the template
	ApiVersion VirtualHubsSpecApiVersion `json:"apiVersion"`
	Comments   *string                   `json:"comments,omitempty"`

	//Condition: Condition of the resource
	Condition *bool                   `json:"condition,omitempty"`
	Copy      *v20150101.ResourceCopy `json:"copy,omitempty"`

	//DependsOn: Collection of resources this resource depends on
	DependsOn []string `json:"dependsOn,omitempty"`

	//Location: Location to deploy resource to
	Location string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the resource
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Properties: Properties of the virtual hub.
	Properties VirtualHubProperties `json:"properties"`

	//Scope: Scope for the resource or deployment. Today, this works for two cases: 1)
	//setting the scope for extension resources 2) deploying resources to the tenant
	//scope in non-tenant scope deployments
	Scope *string `json:"scope,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// +kubebuilder:validation:Required
	//Type: Resource type
	Type VirtualHubsSpecType `json:"type"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/VirtualHubProperties
type VirtualHubProperties struct {

	//AddressPrefix: Address-prefix for this VirtualHub.
	AddressPrefix *string `json:"addressPrefix,omitempty"`

	//AzureFirewall: The azureFirewall associated with this VirtualHub.
	AzureFirewall *SubResource `json:"azureFirewall,omitempty"`

	//ExpressRouteGateway: The expressRouteGateway associated with this VirtualHub.
	ExpressRouteGateway *SubResource `json:"expressRouteGateway,omitempty"`

	//P2SVpnGateway: The P2SVpnGateway associated with this VirtualHub.
	P2SVpnGateway *SubResource `json:"p2SVpnGateway,omitempty"`

	//RouteTable: The routeTable associated with this virtual hub.
	RouteTable *VirtualHubRouteTable `json:"routeTable,omitempty"`

	//RoutingState: The routing state.
	RoutingState *VirtualHubPropertiesRoutingState `json:"routingState,omitempty"`

	//SecurityPartnerProvider: The securityPartnerProvider associated with this
	//VirtualHub.
	SecurityPartnerProvider *SubResource `json:"securityPartnerProvider,omitempty"`

	//SecurityProviderName: The Security Provider name.
	SecurityProviderName *string `json:"securityProviderName,omitempty"`

	//Sku: The sku of this VirtualHub.
	Sku *string `json:"sku,omitempty"`

	//VirtualHubRouteTableV2s: List of all virtual hub route table v2s associated with
	//this VirtualHub.
	VirtualHubRouteTableV2s []VirtualHubRouteTableV2 `json:"virtualHubRouteTableV2s,omitempty"`

	//VirtualRouterAsn: VirtualRouter ASN.
	VirtualRouterAsn *int `json:"virtualRouterAsn,omitempty"`

	//VirtualRouterIps: VirtualRouter IPs.
	VirtualRouterIps []string `json:"virtualRouterIps,omitempty"`

	//VirtualWan: The VirtualWAN to which the VirtualHub belongs.
	VirtualWan *SubResource `json:"virtualWan,omitempty"`

	//VpnGateway: The VpnGateway associated with this VirtualHub.
	VpnGateway *SubResource `json:"vpnGateway,omitempty"`
}

//Generated from:
type VirtualHubProperties_Status struct {

	//AddressPrefix: Address-prefix for this VirtualHub.
	AddressPrefix *string `json:"addressPrefix,omitempty"`

	//AzureFirewall: The azureFirewall associated with this VirtualHub.
	AzureFirewall *SubResource_Status `json:"azureFirewall,omitempty"`

	//BgpConnections: List of references to Bgp Connections.
	BgpConnections []SubResource_Status `json:"bgpConnections,omitempty"`

	//ExpressRouteGateway: The expressRouteGateway associated with this VirtualHub.
	ExpressRouteGateway *SubResource_Status `json:"expressRouteGateway,omitempty"`

	//IpConfigurations: List of references to IpConfigurations.
	IpConfigurations []SubResource_Status `json:"ipConfigurations,omitempty"`

	//P2SVpnGateway: The P2SVpnGateway associated with this VirtualHub.
	P2SVpnGateway *SubResource_Status `json:"p2SVpnGateway,omitempty"`

	//ProvisioningState: The provisioning state of the virtual hub resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//RouteTable: The routeTable associated with this virtual hub.
	RouteTable *VirtualHubRouteTable_Status `json:"routeTable,omitempty"`

	//RoutingState: The routing state.
	RoutingState *RoutingState_Status `json:"routingState,omitempty"`

	//SecurityPartnerProvider: The securityPartnerProvider associated with this
	//VirtualHub.
	SecurityPartnerProvider *SubResource_Status `json:"securityPartnerProvider,omitempty"`

	//SecurityProviderName: The Security Provider name.
	SecurityProviderName *string `json:"securityProviderName,omitempty"`

	//Sku: The sku of this VirtualHub.
	Sku *string `json:"sku,omitempty"`

	//VirtualHubRouteTableV2s: List of all virtual hub route table v2s associated with
	//this VirtualHub.
	VirtualHubRouteTableV2s []VirtualHubRouteTableV2_Status `json:"virtualHubRouteTableV2s,omitempty"`

	//VirtualRouterAsn: VirtualRouter ASN.
	VirtualRouterAsn *int `json:"virtualRouterAsn,omitempty"`

	//VirtualRouterIps: VirtualRouter IPs.
	VirtualRouterIps []string `json:"virtualRouterIps,omitempty"`

	//VirtualWan: The VirtualWAN to which the VirtualHub belongs.
	VirtualWan *SubResource_Status `json:"virtualWan,omitempty"`

	//VpnGateway: The VpnGateway associated with this VirtualHub.
	VpnGateway *SubResource_Status `json:"vpnGateway,omitempty"`
}

// +kubebuilder:validation:Enum={"2020-05-01"}
type VirtualHubsSpecApiVersion string

const VirtualHubsSpecApiVersion20200501 = VirtualHubsSpecApiVersion("2020-05-01")

// +kubebuilder:validation:Enum={"Microsoft.Network/virtualHubs"}
type VirtualHubsSpecType string

const VirtualHubsSpecTypeMicrosoftNetworkVirtualHubs = VirtualHubsSpecType("Microsoft.Network/virtualHubs")

//Generated from:
// +kubebuilder:validation:Enum={"Failed","None","Provisioned","Provisioning"}
type RoutingState_Status string

const (
	RoutingState_StatusFailed       = RoutingState_Status("Failed")
	RoutingState_StatusNone         = RoutingState_Status("None")
	RoutingState_StatusProvisioned  = RoutingState_Status("Provisioned")
	RoutingState_StatusProvisioning = RoutingState_Status("Provisioning")
)

// +kubebuilder:validation:Enum={"Failed","None","Provisioned","Provisioning"}
type VirtualHubPropertiesRoutingState string

const (
	VirtualHubPropertiesRoutingStateFailed       = VirtualHubPropertiesRoutingState("Failed")
	VirtualHubPropertiesRoutingStateNone         = VirtualHubPropertiesRoutingState("None")
	VirtualHubPropertiesRoutingStateProvisioned  = VirtualHubPropertiesRoutingState("Provisioned")
	VirtualHubPropertiesRoutingStateProvisioning = VirtualHubPropertiesRoutingState("Provisioning")
)

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/VirtualHubRouteTable
type VirtualHubRouteTable struct {

	//Routes: List of all routes.
	Routes []VirtualHubRoute `json:"routes,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/VirtualHubRouteTableV2
type VirtualHubRouteTableV2 struct {

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//Properties: Properties of the virtual hub route table v2.
	Properties *VirtualHubRouteTableV2Properties `json:"properties,omitempty"`
}

//Generated from:
type VirtualHubRouteTable_Status struct {

	//Routes: List of all routes.
	Routes []VirtualHubRoute_Status `json:"routes,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/VirtualHubRoute
type VirtualHubRoute struct {

	//AddressPrefixes: List of all addressPrefixes.
	AddressPrefixes []string `json:"addressPrefixes,omitempty"`

	//NextHopIpAddress: NextHop ip address.
	NextHopIpAddress *string `json:"nextHopIpAddress,omitempty"`
}

//Generated from:
type VirtualHubRoute_Status struct {

	//AddressPrefixes: List of all addressPrefixes.
	AddressPrefixes []string `json:"addressPrefixes,omitempty"`

	//NextHopIpAddress: NextHop ip address.
	NextHopIpAddress *string `json:"nextHopIpAddress,omitempty"`
}

func init() {
	SchemeBuilder.Register(&VirtualHubs{}, &VirtualHubsList{})
}
