// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200501

import (
	"github.com/Azure/k8s-infra/hack/crossplane/apis/deploymenttemplate/v20150101"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
type ExpressRouteCircuits struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ExpressRouteCircuits_Spec  `json:"spec,omitempty"`
	Status            ExpressRouteCircuit_Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type ExpressRouteCircuitsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ExpressRouteCircuits `json:"items"`
}

type ExpressRouteCircuit_Status struct {
	AtProvider ExpressRouteCircuitsObservation `json:"atProvider"`
}

type ExpressRouteCircuits_Spec struct {
	ForProvider ExpressRouteCircuitsParameters `json:"forProvider"`
}

type ExpressRouteCircuitsObservation struct {

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//Properties: Properties of the express route circuit.
	Properties *ExpressRouteCircuitPropertiesFormat_Status `json:"properties,omitempty"`

	//Sku: The SKU.
	Sku *ExpressRouteCircuitSku_Status `json:"sku,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

type ExpressRouteCircuitsParameters struct {

	// +kubebuilder:validation:Required
	//ApiVersion: API Version of the resource type, optional when apiProfile is used
	//on the template
	ApiVersion ExpressRouteCircuitsSpecApiVersion `json:"apiVersion"`
	Comments   *string                            `json:"comments,omitempty"`

	//Condition: Condition of the resource
	Condition *bool                   `json:"condition,omitempty"`
	Copy      *v20150101.ResourceCopy `json:"copy,omitempty"`

	//DependsOn: Collection of resources this resource depends on
	DependsOn []string `json:"dependsOn,omitempty"`

	//Location: Location to deploy resource to
	Location string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the resource
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Properties: Properties of the express route circuit.
	Properties ExpressRouteCircuitPropertiesFormat `json:"properties"`

	//Scope: Scope for the resource or deployment. Today, this works for two cases: 1)
	//setting the scope for extension resources 2) deploying resources to the tenant
	//scope in non-tenant scope deployments
	Scope *string `json:"scope,omitempty"`

	//Sku: The SKU.
	Sku *ExpressRouteCircuitSku `json:"sku,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// +kubebuilder:validation:Required
	//Type: Resource type
	Type ExpressRouteCircuitsSpecType `json:"type"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/ExpressRouteCircuitPropertiesFormat
type ExpressRouteCircuitPropertiesFormat struct {

	//AllowClassicOperations: Allow classic operations.
	AllowClassicOperations *bool `json:"allowClassicOperations,omitempty"`

	//Authorizations: The list of authorizations.
	Authorizations []ExpressRouteCircuitAuthorization `json:"authorizations,omitempty"`

	//BandwidthInGbps: The bandwidth of the circuit when the circuit is provisioned on
	//an ExpressRoutePort resource.
	BandwidthInGbps *float64 `json:"bandwidthInGbps,omitempty"`

	//ExpressRoutePort: The reference to the ExpressRoutePort resource when the
	//circuit is provisioned on an ExpressRoutePort resource.
	ExpressRoutePort *SubResource `json:"expressRoutePort,omitempty"`

	//GatewayManagerEtag: The GatewayManager Etag.
	GatewayManagerEtag *string `json:"gatewayManagerEtag,omitempty"`

	//Peerings: The list of peerings.
	Peerings []ExpressRouteCircuitPeering `json:"peerings,omitempty"`

	//ServiceProviderNotes: The ServiceProviderNotes.
	ServiceProviderNotes *string `json:"serviceProviderNotes,omitempty"`

	//ServiceProviderProperties: The ServiceProviderProperties.
	ServiceProviderProperties *ExpressRouteCircuitServiceProviderProperties `json:"serviceProviderProperties,omitempty"`
}

//Generated from:
type ExpressRouteCircuitPropertiesFormat_Status struct {

	//AllowClassicOperations: Allow classic operations.
	AllowClassicOperations *bool `json:"allowClassicOperations,omitempty"`

	//Authorizations: The list of authorizations.
	Authorizations []ExpressRouteCircuitAuthorization_Status `json:"authorizations,omitempty"`

	//BandwidthInGbps: The bandwidth of the circuit when the circuit is provisioned on
	//an ExpressRoutePort resource.
	BandwidthInGbps *float64 `json:"bandwidthInGbps,omitempty"`

	//CircuitProvisioningState: The CircuitProvisioningState state of the resource.
	CircuitProvisioningState *string `json:"circuitProvisioningState,omitempty"`

	//ExpressRoutePort: The reference to the ExpressRoutePort resource when the
	//circuit is provisioned on an ExpressRoutePort resource.
	ExpressRoutePort *SubResource_Status `json:"expressRoutePort,omitempty"`

	//GatewayManagerEtag: The GatewayManager Etag.
	GatewayManagerEtag *string `json:"gatewayManagerEtag,omitempty"`

	//GlobalReachEnabled: Flag denoting global reach status.
	GlobalReachEnabled *bool `json:"globalReachEnabled,omitempty"`

	//Peerings: The list of peerings.
	Peerings []ExpressRouteCircuitPeering_Status `json:"peerings,omitempty"`

	//ProvisioningState: The provisioning state of the express route circuit resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//ServiceKey: The ServiceKey.
	ServiceKey *string `json:"serviceKey,omitempty"`

	//ServiceProviderNotes: The ServiceProviderNotes.
	ServiceProviderNotes *string `json:"serviceProviderNotes,omitempty"`

	//ServiceProviderProperties: The ServiceProviderProperties.
	ServiceProviderProperties *ExpressRouteCircuitServiceProviderProperties_Status `json:"serviceProviderProperties,omitempty"`

	//ServiceProviderProvisioningState: The ServiceProviderProvisioningState state of
	//the resource.
	ServiceProviderProvisioningState *ServiceProviderProvisioningState_Status `json:"serviceProviderProvisioningState,omitempty"`

	//Stag: The identifier of the circuit traffic. Outer tag for QinQ encapsulation.
	Stag *int `json:"stag,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/ExpressRouteCircuitSku
type ExpressRouteCircuitSku struct {

	//Family: The family of the SKU.
	Family *ExpressRouteCircuitSkuFamily `json:"family,omitempty"`

	//Name: The name of the SKU.
	Name *string `json:"name,omitempty"`

	//Tier: The tier of the SKU.
	Tier *ExpressRouteCircuitSkuTier `json:"tier,omitempty"`
}

//Generated from:
type ExpressRouteCircuitSku_Status struct {

	//Family: The family of the SKU.
	Family *ExpressRouteCircuitSkuStatusFamily `json:"family,omitempty"`

	//Name: The name of the SKU.
	Name *string `json:"name,omitempty"`

	//Tier: The tier of the SKU.
	Tier *ExpressRouteCircuitSkuStatusTier `json:"tier,omitempty"`
}

// +kubebuilder:validation:Enum={"2020-05-01"}
type ExpressRouteCircuitsSpecApiVersion string

const ExpressRouteCircuitsSpecApiVersion20200501 = ExpressRouteCircuitsSpecApiVersion("2020-05-01")

// +kubebuilder:validation:Enum={"Microsoft.Network/expressRouteCircuits"}
type ExpressRouteCircuitsSpecType string

const ExpressRouteCircuitsSpecTypeMicrosoftNetworkExpressRouteCircuits = ExpressRouteCircuitsSpecType("Microsoft.Network/expressRouteCircuits")

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/ExpressRouteCircuitAuthorization
type ExpressRouteCircuitAuthorization struct {

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//Properties: Properties of the express route circuit authorization.
	Properties *v1.JSON `json:"properties,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/ExpressRouteCircuitPeering
type ExpressRouteCircuitPeering struct {

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//Properties: Properties of the express route circuit peering.
	Properties *ExpressRouteCircuitPeeringPropertiesFormat `json:"properties,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/ExpressRouteCircuitServiceProviderProperties
type ExpressRouteCircuitServiceProviderProperties struct {

	//BandwidthInMbps: The BandwidthInMbps.
	BandwidthInMbps *int `json:"bandwidthInMbps,omitempty"`

	//PeeringLocation: The peering location.
	PeeringLocation *string `json:"peeringLocation,omitempty"`

	//ServiceProviderName: The serviceProviderName.
	ServiceProviderName *string `json:"serviceProviderName,omitempty"`
}

//Generated from:
type ExpressRouteCircuitServiceProviderProperties_Status struct {

	//BandwidthInMbps: The BandwidthInMbps.
	BandwidthInMbps *int `json:"bandwidthInMbps,omitempty"`

	//PeeringLocation: The peering location.
	PeeringLocation *string `json:"peeringLocation,omitempty"`

	//ServiceProviderName: The serviceProviderName.
	ServiceProviderName *string `json:"serviceProviderName,omitempty"`
}

// +kubebuilder:validation:Enum={"MeteredData","UnlimitedData"}
type ExpressRouteCircuitSkuFamily string

const (
	ExpressRouteCircuitSkuFamilyMeteredData   = ExpressRouteCircuitSkuFamily("MeteredData")
	ExpressRouteCircuitSkuFamilyUnlimitedData = ExpressRouteCircuitSkuFamily("UnlimitedData")
)

// +kubebuilder:validation:Enum={"MeteredData","UnlimitedData"}
type ExpressRouteCircuitSkuStatusFamily string

const (
	ExpressRouteCircuitSkuStatusFamilyMeteredData   = ExpressRouteCircuitSkuStatusFamily("MeteredData")
	ExpressRouteCircuitSkuStatusFamilyUnlimitedData = ExpressRouteCircuitSkuStatusFamily("UnlimitedData")
)

// +kubebuilder:validation:Enum={"Basic","Local","Premium","Standard"}
type ExpressRouteCircuitSkuStatusTier string

const (
	ExpressRouteCircuitSkuStatusTierBasic    = ExpressRouteCircuitSkuStatusTier("Basic")
	ExpressRouteCircuitSkuStatusTierLocal    = ExpressRouteCircuitSkuStatusTier("Local")
	ExpressRouteCircuitSkuStatusTierPremium  = ExpressRouteCircuitSkuStatusTier("Premium")
	ExpressRouteCircuitSkuStatusTierStandard = ExpressRouteCircuitSkuStatusTier("Standard")
)

// +kubebuilder:validation:Enum={"Basic","Local","Premium","Standard"}
type ExpressRouteCircuitSkuTier string

const (
	ExpressRouteCircuitSkuTierBasic    = ExpressRouteCircuitSkuTier("Basic")
	ExpressRouteCircuitSkuTierLocal    = ExpressRouteCircuitSkuTier("Local")
	ExpressRouteCircuitSkuTierPremium  = ExpressRouteCircuitSkuTier("Premium")
	ExpressRouteCircuitSkuTierStandard = ExpressRouteCircuitSkuTier("Standard")
)

//Generated from:
// +kubebuilder:validation:Enum={"Deprovisioning","NotProvisioned","Provisioned","Provisioning"}
type ServiceProviderProvisioningState_Status string

const (
	ServiceProviderProvisioningState_StatusDeprovisioning = ServiceProviderProvisioningState_Status("Deprovisioning")
	ServiceProviderProvisioningState_StatusNotProvisioned = ServiceProviderProvisioningState_Status("NotProvisioned")
	ServiceProviderProvisioningState_StatusProvisioned    = ServiceProviderProvisioningState_Status("Provisioned")
	ServiceProviderProvisioningState_StatusProvisioning   = ServiceProviderProvisioningState_Status("Provisioning")
)

func init() {
	SchemeBuilder.Register(&ExpressRouteCircuits{}, &ExpressRouteCircuitsList{})
}
