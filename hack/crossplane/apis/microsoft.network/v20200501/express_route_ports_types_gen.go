// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200501

import (
	"fmt"
	"github.com/Azure/k8s-infra/hack/generated/apis/deploymenttemplate/v20150101"
	"github.com/Azure/k8s-infra/hack/generated/pkg/genruntime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
type ExpressRoutePorts struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ExpressRoutePorts_Spec  `json:"spec,omitempty"`
	Status            ExpressRoutePort_Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type ExpressRoutePortsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ExpressRoutePorts `json:"items"`
}

//Generated from:
type ExpressRoutePort_Status struct {

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Identity: The identity of ExpressRoutePort, if configured.
	Identity *ManagedServiceIdentity_Status `json:"identity,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//Properties: ExpressRoutePort properties.
	Properties *ExpressRoutePortPropertiesFormat_Status `json:"properties,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

type ExpressRoutePorts_Spec struct {
	ForProvider ExpressRoutePortsParameters `json:"forProvider"`
}

//Generated from:
type ExpressRoutePortPropertiesFormat_Status struct {

	//AllocationDate: Date of the physical port allocation to be used in Letter of
	//Authorization.
	AllocationDate *string `json:"allocationDate,omitempty"`

	//BandwidthInGbps: Bandwidth of procured ports in Gbps.
	BandwidthInGbps *int `json:"bandwidthInGbps,omitempty"`

	//Circuits: Reference the ExpressRoute circuit(s) that are provisioned on this
	//ExpressRoutePort resource.
	Circuits []SubResource_Status `json:"circuits,omitempty"`

	//Encapsulation: Encapsulation method on physical ports.
	Encapsulation *ExpressRoutePortPropertiesFormatStatusEncapsulation `json:"encapsulation,omitempty"`

	//EtherType: Ether type of the physical port.
	EtherType *string `json:"etherType,omitempty"`

	//Links: The set of physical links of the ExpressRoutePort resource.
	Links []ExpressRouteLink_Status `json:"links,omitempty"`

	//Mtu: Maximum transmission unit of the physical port pair(s).
	Mtu *string `json:"mtu,omitempty"`

	//PeeringLocation: The name of the peering location that the ExpressRoutePort is
	//mapped to physically.
	PeeringLocation *string `json:"peeringLocation,omitempty"`

	//ProvisionedBandwidthInGbps: Aggregate Gbps of associated circuit bandwidths.
	ProvisionedBandwidthInGbps *float64 `json:"provisionedBandwidthInGbps,omitempty"`

	//ProvisioningState: The provisioning state of the express route port resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//ResourceGuid: The resource GUID property of the express route port resource.
	ResourceGuid *string `json:"resourceGuid,omitempty"`
}

type ExpressRoutePortsParameters struct {

	// +kubebuilder:validation:Required
	//ApiVersion: API Version of the resource type, optional when apiProfile is used
	//on the template
	ApiVersion ExpressRoutePortsSpecApiVersion `json:"apiVersion"`
	Comments   *string                         `json:"comments,omitempty"`

	//Condition: Condition of the resource
	Condition *bool                   `json:"condition,omitempty"`
	Copy      *v20150101.ResourceCopy `json:"copy,omitempty"`

	//DependsOn: Collection of resources this resource depends on
	DependsOn []string `json:"dependsOn,omitempty"`

	//Identity: The identity of ExpressRoutePort, if configured.
	Identity *ManagedServiceIdentity `json:"identity,omitempty"`

	//Location: Location to deploy resource to
	Location string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the resource
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Properties: ExpressRoutePort properties.
	Properties ExpressRoutePortPropertiesFormat `json:"properties"`

	//Scope: Scope for the resource or deployment. Today, this works for two cases: 1)
	//setting the scope for extension resources 2) deploying resources to the tenant
	//scope in non-tenant scope deployments
	Scope *string `json:"scope,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// +kubebuilder:validation:Required
	//Type: Resource type
	Type ExpressRoutePortsSpecType `json:"type"`
}

//Generated from:
type ExpressRouteLink_Status struct {

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: Name of child port resource that is unique among child port resources of
	//the parent.
	Name *string `json:"name,omitempty"`

	//Properties: ExpressRouteLink properties.
	Properties *ExpressRouteLinkPropertiesFormat_Status `json:"properties,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/ExpressRoutePortPropertiesFormat
type ExpressRoutePortPropertiesFormat struct {

	//BandwidthInGbps: Bandwidth of procured ports in Gbps.
	BandwidthInGbps *int `json:"bandwidthInGbps,omitempty"`

	//Encapsulation: Encapsulation method on physical ports.
	Encapsulation *ExpressRoutePortPropertiesFormatEncapsulation `json:"encapsulation,omitempty"`

	//Links: The set of physical links of the ExpressRoutePort resource.
	Links []ExpressRouteLink `json:"links,omitempty"`

	//PeeringLocation: The name of the peering location that the ExpressRoutePort is
	//mapped to physically.
	PeeringLocation *string `json:"peeringLocation,omitempty"`
}

// +kubebuilder:validation:Enum={"Dot1Q","QinQ"}
type ExpressRoutePortPropertiesFormatStatusEncapsulation string

const (
	ExpressRoutePortPropertiesFormatStatusEncapsulationDot1Q = ExpressRoutePortPropertiesFormatStatusEncapsulation("Dot1Q")
	ExpressRoutePortPropertiesFormatStatusEncapsulationQinQ  = ExpressRoutePortPropertiesFormatStatusEncapsulation("QinQ")
)

// +kubebuilder:validation:Enum={"2020-05-01"}
type ExpressRoutePortsSpecApiVersion string

const ExpressRoutePortsSpecApiVersion20200501 = ExpressRoutePortsSpecApiVersion("2020-05-01")

// +kubebuilder:validation:Enum={"Microsoft.Network/ExpressRoutePorts"}
type ExpressRoutePortsSpecType string

const ExpressRoutePortsSpecTypeMicrosoftNetworkExpressRoutePorts = ExpressRoutePortsSpecType("Microsoft.Network/ExpressRoutePorts")

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/ExpressRouteLink
type ExpressRouteLink struct {

	//Name: Name of child port resource that is unique among child port resources of
	//the parent.
	Name *string `json:"name,omitempty"`

	//Properties: ExpressRouteLink properties.
	Properties *ExpressRouteLinkPropertiesFormat `json:"properties,omitempty"`
}

//Generated from:
type ExpressRouteLinkPropertiesFormat_Status struct {

	//AdminState: Administrative state of the physical port.
	AdminState *ExpressRouteLinkPropertiesFormatStatusAdminState `json:"adminState,omitempty"`

	//ConnectorType: Physical fiber port type.
	ConnectorType *ExpressRouteLinkPropertiesFormatStatusConnectorType `json:"connectorType,omitempty"`

	//InterfaceName: Name of Azure router interface.
	InterfaceName *string `json:"interfaceName,omitempty"`

	//MacSecConfig: MacSec configuration.
	MacSecConfig *ExpressRouteLinkMacSecConfig_Status `json:"macSecConfig,omitempty"`

	//PatchPanelId: Mapping between physical port to patch panel port.
	PatchPanelId *string `json:"patchPanelId,omitempty"`

	//ProvisioningState: The provisioning state of the express route link resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//RackId: Mapping of physical patch panel to rack.
	RackId *string `json:"rackId,omitempty"`

	//RouterName: Name of Azure router associated with physical port.
	RouterName *string `json:"routerName,omitempty"`
}

// +kubebuilder:validation:Enum={"Dot1Q","QinQ"}
type ExpressRoutePortPropertiesFormatEncapsulation string

const (
	ExpressRoutePortPropertiesFormatEncapsulationDot1Q = ExpressRoutePortPropertiesFormatEncapsulation("Dot1Q")
	ExpressRoutePortPropertiesFormatEncapsulationQinQ  = ExpressRoutePortPropertiesFormatEncapsulation("QinQ")
)

//Generated from:
type ExpressRouteLinkMacSecConfig_Status struct {

	//CakSecretIdentifier: Keyvault Secret Identifier URL containing Mac security CAK
	//key.
	CakSecretIdentifier *string `json:"cakSecretIdentifier,omitempty"`

	//Cipher: Mac security cipher.
	Cipher *ExpressRouteLinkMacSecConfigStatusCipher `json:"cipher,omitempty"`

	//CknSecretIdentifier: Keyvault Secret Identifier URL containing Mac security CKN
	//key.
	CknSecretIdentifier *string `json:"cknSecretIdentifier,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/ExpressRouteLinkPropertiesFormat
type ExpressRouteLinkPropertiesFormat struct {

	//AdminState: Administrative state of the physical port.
	AdminState *ExpressRouteLinkPropertiesFormatAdminState `json:"adminState,omitempty"`

	//MacSecConfig: MacSec configuration.
	MacSecConfig *ExpressRouteLinkMacSecConfig `json:"macSecConfig,omitempty"`
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ExpressRouteLinkPropertiesFormatStatusAdminState string

const (
	ExpressRouteLinkPropertiesFormatStatusAdminStateDisabled = ExpressRouteLinkPropertiesFormatStatusAdminState("Disabled")
	ExpressRouteLinkPropertiesFormatStatusAdminStateEnabled  = ExpressRouteLinkPropertiesFormatStatusAdminState("Enabled")
)

// +kubebuilder:validation:Enum={"LC","SC"}
type ExpressRouteLinkPropertiesFormatStatusConnectorType string

const (
	ExpressRouteLinkPropertiesFormatStatusConnectorTypeLC = ExpressRouteLinkPropertiesFormatStatusConnectorType("LC")
	ExpressRouteLinkPropertiesFormatStatusConnectorTypeSC = ExpressRouteLinkPropertiesFormatStatusConnectorType("SC")
)

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/ExpressRouteLinkMacSecConfig
type ExpressRouteLinkMacSecConfig struct {

	//CakSecretIdentifier: Keyvault Secret Identifier URL containing Mac security CAK
	//key.
	CakSecretIdentifier *string `json:"cakSecretIdentifier,omitempty"`

	//Cipher: Mac security cipher.
	Cipher *ExpressRouteLinkMacSecConfigCipher `json:"cipher,omitempty"`

	//CknSecretIdentifier: Keyvault Secret Identifier URL containing Mac security CKN
	//key.
	CknSecretIdentifier *string `json:"cknSecretIdentifier,omitempty"`
}

// +kubebuilder:validation:Enum={"gcm-aes-128","gcm-aes-256"}
type ExpressRouteLinkMacSecConfigStatusCipher string

const (
	ExpressRouteLinkMacSecConfigStatusCipherGcmAes128 = ExpressRouteLinkMacSecConfigStatusCipher("gcm-aes-128")
	ExpressRouteLinkMacSecConfigStatusCipherGcmAes256 = ExpressRouteLinkMacSecConfigStatusCipher("gcm-aes-256")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ExpressRouteLinkPropertiesFormatAdminState string

const (
	ExpressRouteLinkPropertiesFormatAdminStateDisabled = ExpressRouteLinkPropertiesFormatAdminState("Disabled")
	ExpressRouteLinkPropertiesFormatAdminStateEnabled  = ExpressRouteLinkPropertiesFormatAdminState("Enabled")
)

// +kubebuilder:validation:Enum={"gcm-aes-128","gcm-aes-256"}
type ExpressRouteLinkMacSecConfigCipher string

const (
	ExpressRouteLinkMacSecConfigCipherGcmAes128 = ExpressRouteLinkMacSecConfigCipher("gcm-aes-128")
	ExpressRouteLinkMacSecConfigCipherGcmAes256 = ExpressRouteLinkMacSecConfigCipher("gcm-aes-256")
)

func init() {
	SchemeBuilder.Register(&ExpressRoutePorts{}, &ExpressRoutePortsList{})
}
