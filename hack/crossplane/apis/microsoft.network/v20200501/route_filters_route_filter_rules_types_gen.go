// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200501

import (
	"github.com/Azure/k8s-infra/hack/crossplane/apis/deploymenttemplate/v20150101"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
type RouteFiltersRouteFilterRules struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteFiltersRouteFilterRules_Spec `json:"spec,omitempty"`
	Status            RouteFilterRule_Status            `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type RouteFiltersRouteFilterRulesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouteFiltersRouteFilterRules `json:"items"`
}

type RouteFilterRule_Status struct {
	AtProvider RouteFiltersRouteFilterRulesObservation `json:"atProvider"`
}

type RouteFiltersRouteFilterRules_Spec struct {
	ForProvider RouteFiltersRouteFilterRulesParameters `json:"forProvider"`
}

type RouteFiltersRouteFilterRulesObservation struct {

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//Properties: Properties of the route filter rule.
	Properties *RouteFilterRulePropertiesFormat_Status `json:"properties,omitempty"`
}

type RouteFiltersRouteFilterRulesParameters struct {

	// +kubebuilder:validation:Required
	//ApiVersion: API Version of the resource type, optional when apiProfile is used
	//on the template
	ApiVersion RouteFiltersRouteFilterRulesSpecApiVersion `json:"apiVersion"`
	Comments   *string                                    `json:"comments,omitempty"`

	//Condition: Condition of the resource
	Condition *bool                   `json:"condition,omitempty"`
	Copy      *v20150101.ResourceCopy `json:"copy,omitempty"`

	//DependsOn: Collection of resources this resource depends on
	DependsOn []string `json:"dependsOn,omitempty"`

	//Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the resource
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Properties: Properties of the route filter rule.
	Properties RouteFilterRulePropertiesFormat `json:"properties"`

	//Scope: Scope for the resource or deployment. Today, this works for two cases: 1)
	//setting the scope for extension resources 2) deploying resources to the tenant
	//scope in non-tenant scope deployments
	Scope *string `json:"scope,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// +kubebuilder:validation:Required
	//Type: Resource type
	Type RouteFiltersRouteFilterRulesSpecType `json:"type"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-05-01/Microsoft.Network.json#/definitions/RouteFilterRulePropertiesFormat
type RouteFilterRulePropertiesFormat struct {

	// +kubebuilder:validation:Required
	//Access: The access type of the rule.
	Access RouteFilterRulePropertiesFormatAccess `json:"access"`

	// +kubebuilder:validation:Required
	//Communities: The collection for bgp community values to filter on. e.g.
	//['12076:5010','12076:5020'].
	Communities []string `json:"communities"`

	// +kubebuilder:validation:Required
	//RouteFilterRuleType: The rule type of the rule.
	RouteFilterRuleType RouteFilterRulePropertiesFormatRouteFilterRuleType `json:"routeFilterRuleType"`
}

//Generated from:
type RouteFilterRulePropertiesFormat_Status struct {

	// +kubebuilder:validation:Required
	//Access: The access type of the rule.
	Access Access_Status `json:"access"`

	// +kubebuilder:validation:Required
	//Communities: The collection for bgp community values to filter on. e.g.
	//['12076:5010','12076:5020'].
	Communities []string `json:"communities"`

	//ProvisioningState: The provisioning state of the route filter rule resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	// +kubebuilder:validation:Required
	//RouteFilterRuleType: The rule type of the rule.
	RouteFilterRuleType RouteFilterRulePropertiesFormatStatusRouteFilterRuleType `json:"routeFilterRuleType"`
}

// +kubebuilder:validation:Enum={"2020-05-01"}
type RouteFiltersRouteFilterRulesSpecApiVersion string

const RouteFiltersRouteFilterRulesSpecApiVersion20200501 = RouteFiltersRouteFilterRulesSpecApiVersion("2020-05-01")

// +kubebuilder:validation:Enum={"Microsoft.Network/routeFilters/routeFilterRules"}
type RouteFiltersRouteFilterRulesSpecType string

const RouteFiltersRouteFilterRulesSpecTypeMicrosoftNetworkRouteFiltersRouteFilterRules = RouteFiltersRouteFilterRulesSpecType("Microsoft.Network/routeFilters/routeFilterRules")

//Generated from:
// +kubebuilder:validation:Enum={"Allow","Deny"}
type Access_Status string

const (
	Access_StatusAllow = Access_Status("Allow")
	Access_StatusDeny  = Access_Status("Deny")
)

// +kubebuilder:validation:Enum={"Allow","Deny"}
type RouteFilterRulePropertiesFormatAccess string

const (
	RouteFilterRulePropertiesFormatAccessAllow = RouteFilterRulePropertiesFormatAccess("Allow")
	RouteFilterRulePropertiesFormatAccessDeny  = RouteFilterRulePropertiesFormatAccess("Deny")
)

// +kubebuilder:validation:Enum={"Community"}
type RouteFilterRulePropertiesFormatRouteFilterRuleType string

const RouteFilterRulePropertiesFormatRouteFilterRuleTypeCommunity = RouteFilterRulePropertiesFormatRouteFilterRuleType("Community")

// +kubebuilder:validation:Enum={"Community"}
type RouteFilterRulePropertiesFormatStatusRouteFilterRuleType string

const RouteFilterRulePropertiesFormatStatusRouteFilterRuleTypeCommunity = RouteFilterRulePropertiesFormatStatusRouteFilterRuleType("Community")

func init() {
	SchemeBuilder.Register(&RouteFiltersRouteFilterRules{}, &RouteFiltersRouteFilterRulesList{})
}
