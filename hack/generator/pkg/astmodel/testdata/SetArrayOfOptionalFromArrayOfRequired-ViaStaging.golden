// Code generated by k8s-infra. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package vCurrent

import (
	"github.com/Azure/k8s-infra/hack/generated/_apis/Verification/vHub"
	"github.com/Azure/k8s-infra/hack/generated/_apis/Verification/vNext"
)

type Person struct {
	scores []*int `json:"scores"`
}

// ConvertFrom populates our Person from the provided source Person
func (person Person) ConvertFrom(source *vHub.Person) error {
	// personTemp is our intermediate for conversion
	var personTemp vNext.Person

	// Populate personTemp from source
	err := personTemp.ConvertFrom(source)
	if err != nil {
		return errors.Wrap(err, "for person, calling personTemp.ConvertFrom(source)")
	}

	// scores
	score1List := make([]*int, len(personTemp.scores))
	for score1Index, score1Item := range personTemp.scores {
		score := score1Item
		score1List[score1Index] = &score
	}

	person.scores = score1List

	// No error
	return nil
}

// ConvertTo populates the provided destination Person from our Person
func (person Person) ConvertTo(destination *vHub.Person) error {
	// personTemp is our intermediate for conversion
	var personTemp vNext.Person

	// scores
	scoreList := make([]int, len(person.scores))
	for scoreIndex, scoreItem := range person.scores {
		if scoreItem != nil {
			scoreList[scoreIndex] = *scoreItem
		} else {
			scoreList[scoreIndex] = 0
		}
	}

	personTemp.scores = scoreList

	// Populate destination from personTemp
	err := personTemp.ConvertTo(destination)
	if err != nil {
		return errors.Wrap(err, "for person, calling personTemp.ConvertTo(destination)")
	}

	// No error
	return nil
}
