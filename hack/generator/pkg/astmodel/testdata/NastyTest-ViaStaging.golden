// Code generated by k8s-infra. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package vVersion

type Party struct {
	nasty map[string][]map[string]bool `json:"my-oh-my"`
}

type Person struct {
	nasty map[string][]map[string]bool `json:"my-oh-my"`
}

func (person Person) ConvertFrom(source *Party) error {
	// personTemp is our intermediate for conversion
	var personTemp Party

	// Populate personTemp from source
	personTemp.ConvertFrom(source)

	// nasty
	nastyMap := make(map[string][]map[string]bool)
	for key, nasty := range personTemp.nasty {
		nastyList := make([]map[string]bool, len(nasty))
		for index, nasty1 := range nasty {
			nastyMap1 := make(map[string]bool)
			for key, nasty2 := range nasty1 {
				nastyMap1[key] = nasty2
			}

			nastyList[index] = nastyMap1
		}

		nastyMap[key] = nastyList
	}

	person.nasty = nastyMap
}

func (person Person) ConvertTo(destination *Party) error {
	// personTemp is our intermediate for conversion
	var personTemp Party

	// nasty
	nastyMap := make(map[string][]map[string]bool)
	for key, nasty := range person.nasty {
		nastyList := make([]map[string]bool, len(nasty))
		for index, nasty1 := range nasty {
			nastyMap1 := make(map[string]bool)
			for key, nasty2 := range nasty1 {
				nastyMap1[key] = nasty2
			}

			nastyList[index] = nastyMap1
		}

		nastyMap[key] = nastyList
	}

	personTemp.nasty = nastyMap

	// Populate destination from personTemp
	personTemp.ConvertTo(destination)
}
