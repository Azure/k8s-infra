// Code generated by k8s-infra. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20200101

import (
	"fmt"
	"github.com/Azure/k8s-infra/hack/generated/pkg/genruntime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FakeResource_Spec `json:"spec,omitempty"`
}

// +kubebuilder:webhook:path=/mutate-test-infra-azure-com-v20200101-fakeresource,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.infra.azure.com,resources=fakeresources,verbs=create;update,versions=v20200101,name=default.v20200101.fakeresources.test.infra.azure.com

var _ admission.Defaulter = &FakeResource{}

// Default defaults the Azure name of the resource to the Kubernetes name
func (fakeResource *FakeResource) Default() {
	if fakeResource.Spec.AzureName == "" {
		fakeResource.Spec.AzureName = fakeResource.Name
	}
}

var _ genruntime.KubernetesResource = &FakeResource{}

// AzureName returns the Azure name of the resource
func (fakeResource *FakeResource) AzureName() string {
	return fakeResource.Spec.AzureName
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (fakeResource *FakeResource) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(fakeResource.Spec)
	return &genruntime.ResourceReference{Name: fakeResource.Spec.Owner.Name, Group: group, Kind: kind}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FakeResource `json:"items"`
}

type FakeResource_SpecArm struct {
	ApiVersion    FakeResourceSpecApiVersion `json:"apiVersion"`
	ArrayFoo      []FooArm                   `json:"arrayFoo"`
	ArrayOfArrays [][]FooArm                 `json:"arrayOfArrays,omitempty"`
	ArrayOfEnums  []Color                    `json:"arrayOfEnums,omitempty"`
	ArrayOfMaps   []map[string]FooArm        `json:"arrayOfMaps,omitempty"`
	Name          string                     `json:"name"`
	Type          FakeResourceSpecType       `json:"type"`
}

var _ genruntime.ArmResourceSpec = &FakeResource_SpecArm{}

// GetApiVersion returns the ApiVersion of the resource
func (fakeResourceSpecArm FakeResource_SpecArm) GetApiVersion() string {
	return string(fakeResourceSpecArm.ApiVersion)
}

// GetName returns the Name of the resource
func (fakeResourceSpecArm FakeResource_SpecArm) GetName() string {
	return fakeResourceSpecArm.Name
}

// GetType returns the Type of the resource
func (fakeResourceSpecArm FakeResource_SpecArm) GetType() string {
	return string(fakeResourceSpecArm.Type)
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Color
// +kubebuilder:validation:Enum={"blue","green","red"}
type Color string

const (
	ColorBlue  = Color("blue")
	ColorGreen = Color("green")
	ColorRed   = Color("red")
)

// +kubebuilder:validation:Enum={"2020-06-01"}
type FakeResourceSpecApiVersion string

const FakeResourceSpecApiVersion20200601 = FakeResourceSpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/FakeResource"}
type FakeResourceSpecType string

const FakeResourceSpecTypeMicrosoftAzureFakeResource = FakeResourceSpecType("Microsoft.Azure/FakeResource")

type FakeResource_Spec struct {
	// +kubebuilder:validation:Required
	ArrayFoo      []Foo            `json:"arrayFoo"`
	ArrayOfArrays [][]Foo          `json:"arrayOfArrays,omitempty"`
	ArrayOfEnums  []Color          `json:"arrayOfEnums,omitempty"`
	ArrayOfMaps   []map[string]Foo `json:"arrayOfMaps,omitempty"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources.infra.azure.com" json:"owner" kind:"ResourceGroup"`
}

var _ genruntime.ArmTransformer = &FakeResource_Spec{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (fakeResourceSpec *FakeResource_Spec) ConvertToArm(name string) (interface{}, error) {
	if fakeResourceSpec == nil {
		return nil, nil
	}
	var result FakeResource_SpecArm
	result.ApiVersion = FakeResourceSpecApiVersion20200601
	for _, item := range fakeResourceSpec.ArrayFoo {
		elem, err := item.ConvertToArm(name)
		if err != nil {
			return nil, err
		}
		elemTyped := elem.(FooArm)
		result.ArrayFoo = append(result.ArrayFoo, elemTyped)
	}
	for _, item := range fakeResourceSpec.ArrayOfArrays {
		var elemTyped []FooArm
		for _, item := range item {
			elem, err := item.ConvertToArm(name)
			if err != nil {
				return nil, err
			}
			elemTyped1 := elem.(FooArm)
			elemTyped = append(elemTyped, elemTyped1)
		}
		result.ArrayOfArrays = append(result.ArrayOfArrays, elemTyped)
	}
	for _, item := range fakeResourceSpec.ArrayOfEnums {
		elemTyped := item
		result.ArrayOfEnums = append(result.ArrayOfEnums, elemTyped)
	}
	for _, item := range fakeResourceSpec.ArrayOfMaps {
		elemTyped := make(map[string]FooArm)
		for key, value := range item {
			elem, err := value.ConvertToArm(name)
			if err != nil {
				return nil, err
			}
			elemTyped1 := elem.(FooArm)
			elemTyped[key] = elemTyped1
		}
		result.ArrayOfMaps = append(result.ArrayOfMaps, elemTyped)
	}
	result.Name = name
	result.Type = FakeResourceSpecTypeMicrosoftAzureFakeResource
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (fakeResourceSpec *FakeResource_Spec) CreateEmptyArmValue() interface{} {
	return FakeResource_SpecArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (fakeResourceSpec *FakeResource_Spec) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_SpecArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected FakeResource_SpecArm, got %T", armInput)
	}
	var err error
	for _, item := range typedInput.ArrayFoo {
		var elem Foo
		err = elem.PopulateFromArm(owner, item)
		if err != nil {
			return err
		}
		fakeResourceSpec.ArrayFoo = append(fakeResourceSpec.ArrayFoo, elem)
	}
	for _, item := range typedInput.ArrayOfArrays {
		var elem []Foo
		for _, item := range item {
			var elem1 Foo
			err = elem1.PopulateFromArm(owner, item)
			if err != nil {
				return err
			}
			elem = append(elem, elem1)
		}
		fakeResourceSpec.ArrayOfArrays = append(fakeResourceSpec.ArrayOfArrays, elem)
	}
	for _, item := range typedInput.ArrayOfEnums {
		fakeResourceSpec.ArrayOfEnums = append(fakeResourceSpec.ArrayOfEnums, item)
	}
	for _, item := range typedInput.ArrayOfMaps {
		if item != nil {
			elem := make(map[string]Foo)
			for key, value := range item {
				var elem1 Foo
				err = elem1.PopulateFromArm(owner, value)
				if err != nil {
					return err
				}
				elem[key] = elem1
			}
			fakeResourceSpec.ArrayOfMaps = append(fakeResourceSpec.ArrayOfMaps, elem)
		}
	}
	fakeResourceSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromArmName(typedInput.Name))
	fakeResourceSpec.Owner = owner
	return nil
}

// SetAzureName sets the Azure name of the resource
func (fakeResourceSpec *FakeResource_Spec) SetAzureName(azureName string) {
	fakeResourceSpec.AzureName = azureName
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type FooArm struct {
	Name *string `json:"name,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo struct {
	Name *string `json:"name,omitempty"`
}

var _ genruntime.ArmTransformer = &Foo{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (foo *Foo) ConvertToArm(name string) (interface{}, error) {
	if foo == nil {
		return nil, nil
	}
	var result FooArm
	if foo.Name != nil {
		nameTyped := *foo.Name
		result.Name = &nameTyped
	}
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (foo *Foo) CreateEmptyArmValue() interface{} {
	return FooArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (foo *Foo) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FooArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected FooArm, got %T", armInput)
	}
	if typedInput.Name != nil {
		nameTyped := *typedInput.Name
		foo.Name = &nameTyped
	}
	return nil
}

func init() {
	SchemeBuilder.Register(&FakeResource{}, &FakeResourceList{})
}
