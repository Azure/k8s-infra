// Code generated by k8s-infra. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20200101

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"encoding/json"
	"fmt"
	"github.com/Azure/k8s-infra/hack/generated/pkg/genruntime"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FakeResource_Spec `json:"spec,omitempty"`
}

// +kubebuilder:webhook:path=/mutate-test-infra-azure-com-v20200101-fakeresource,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.infra.azure.com,resources=fakeresources,verbs=create;update,versions=v20200101,name=default.v20200101.fakeresources.test.infra.azure.com

var _ admission.Defaulter = &FakeResource{}

// Default defaults the Azure name of the resource to the Kubernetes name
func (fakeResource *FakeResource) Default() {
	if fakeResource.Spec.AzureName == "" {
		fakeResource.Spec.AzureName = fakeResource.Name
	}
}

var _ genruntime.KubernetesResource = &FakeResource{}

// AzureName returns the Azure name of the resource
func (fakeResource *FakeResource) AzureName() string {
	return fakeResource.Spec.AzureName
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (fakeResource *FakeResource) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(fakeResource.Spec)
	return &genruntime.ResourceReference{Name: fakeResource.Spec.Owner.Name, Group: group, Kind: kind}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FakeResource `json:"items"`
}

type FakeResource_SpecArm struct {
	ApiVersion FakeResourceSpecApiVersion `json:"apiVersion"`
	Name       string                     `json:"name"`
	Properties *PropertiesArm             `json:"properties,omitempty"`
	Type       FakeResourceSpecType       `json:"type"`
}

var _ genruntime.ArmResourceSpec = &FakeResource_SpecArm{}

// GetApiVersion returns the ApiVersion of the resource
func (fakeResourceSpecArm FakeResource_SpecArm) GetApiVersion() string {
	return string(fakeResourceSpecArm.ApiVersion)
}

// GetName returns the Name of the resource
func (fakeResourceSpecArm FakeResource_SpecArm) GetName() string {
	return fakeResourceSpecArm.Name
}

// GetType returns the Type of the resource
func (fakeResourceSpecArm FakeResource_SpecArm) GetType() string {
	return string(fakeResourceSpecArm.Type)
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type FakeResourceSpecApiVersion string

const FakeResourceSpecApiVersion20200601 = FakeResourceSpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/FakeResource"}
type FakeResourceSpecType string

const FakeResourceSpecTypeMicrosoftAzureFakeResource = FakeResourceSpecType("Microsoft.Azure/FakeResource")

type FakeResource_Spec struct {
	// +kubebuilder:validation:Required
	ApiVersion FakeResourceSpecApiVersion `json:"apiVersion"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner      genruntime.KnownResourceReference `group:"microsoft.resources.infra.azure.com" json:"owner" kind:"ResourceGroup"`
	Properties *Properties                       `json:"properties,omitempty"`
}

var _ genruntime.ArmTransformer = &FakeResource_Spec{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (fakeResourceSpec *FakeResource_Spec) ConvertToArm(name string) (interface{}, error) {
	if fakeResourceSpec == nil {
		return nil, nil
	}
	var result FakeResource_SpecArm
	result.ApiVersion = fakeResourceSpec.ApiVersion
	result.Name = name
	if fakeResourceSpec.Properties != nil {
		properties, err := (*fakeResourceSpec.Properties).ConvertToArm(name)
		if err != nil {
			return nil, err
		}
		propertiesTyped := properties.(PropertiesArm)
		result.Properties = &propertiesTyped
	}
	result.Type = FakeResourceSpecTypeMicrosoftAzureFakeResource
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (fakeResourceSpec *FakeResource_Spec) CreateEmptyArmValue() interface{} {
	return FakeResource_SpecArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (fakeResourceSpec *FakeResource_Spec) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_SpecArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected FakeResource_SpecArm, got %T", armInput)
	}
	fakeResourceSpec.ApiVersion = typedInput.ApiVersion
	fakeResourceSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromArmName(typedInput.Name))
	fakeResourceSpec.Owner = owner
	var err error
	if typedInput.Properties != nil {
		var properties Properties
		err = properties.PopulateFromArm(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		propertiesTyped := properties
		fakeResourceSpec.Properties = &propertiesTyped
	}
	return nil
}

// SetAzureName sets the Azure name of the resource
func (fakeResourceSpec *FakeResource_Spec) SetAzureName(azureName string) {
	fakeResourceSpec.AzureName = azureName
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Properties
type PropertiesArm struct {
	//Bar: Mutually exclusive with all other properties
	Bar *BarArm `json:"bar,omitempty"`

	//Baz: Mutually exclusive with all other properties
	Baz *BazArm `json:"baz,omitempty"`

	//Foo: Mutually exclusive with all other properties
	Foo *FooArm `json:"foo,omitempty"`
}

// MarshalJSON defers JSON marshaling to the first non-nil property, because PropertiesArm represents a discriminated union (JSON OneOf)
func (propertiesArm PropertiesArm) MarshalJSON() ([]byte, error) {
	if propertiesArm.Bar != nil {
		return json.Marshal(propertiesArm.Bar)
	}
	if propertiesArm.Baz != nil {
		return json.Marshal(propertiesArm.Baz)
	}
	if propertiesArm.Foo != nil {
		return json.Marshal(propertiesArm.Foo)
	}
	return nil, nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Bar
type BarArm struct {
	Size int `json:"size"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Baz
type BazArm struct {
	Enabled bool `json:"enabled"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type FooArm struct {
	Name *string `json:"name,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Properties
type Properties struct {
	//Bar: Mutually exclusive with all other properties
	Bar *Bar `json:"bar,omitempty"`

	//Baz: Mutually exclusive with all other properties
	Baz *Baz `json:"baz,omitempty"`

	//Foo: Mutually exclusive with all other properties
	Foo *Foo `json:"foo,omitempty"`
}

var _ genruntime.ArmTransformer = &Properties{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (properties *Properties) ConvertToArm(name string) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result PropertiesArm
	if properties.Bar != nil {
		bar, err := (*properties.Bar).ConvertToArm(name)
		if err != nil {
			return nil, err
		}
		barTyped := bar.(BarArm)
		result.Bar = &barTyped
	}
	if properties.Baz != nil {
		baz, err := (*properties.Baz).ConvertToArm(name)
		if err != nil {
			return nil, err
		}
		bazTyped := baz.(BazArm)
		result.Baz = &bazTyped
	}
	if properties.Foo != nil {
		foo, err := (*properties.Foo).ConvertToArm(name)
		if err != nil {
			return nil, err
		}
		fooTyped := foo.(FooArm)
		result.Foo = &fooTyped
	}
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (properties *Properties) CreateEmptyArmValue() interface{} {
	return PropertiesArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (properties *Properties) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(PropertiesArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected PropertiesArm, got %T", armInput)
	}
	var err error
	if typedInput.Bar != nil {
		var bar Bar
		err = bar.PopulateFromArm(owner, *typedInput.Bar)
		if err != nil {
			return err
		}
		barTyped := bar
		properties.Bar = &barTyped
	}
	if typedInput.Baz != nil {
		var baz Baz
		err = baz.PopulateFromArm(owner, *typedInput.Baz)
		if err != nil {
			return err
		}
		bazTyped := baz
		properties.Baz = &bazTyped
	}
	if typedInput.Foo != nil {
		var foo Foo
		err = foo.PopulateFromArm(owner, *typedInput.Foo)
		if err != nil {
			return err
		}
		fooTyped := foo
		properties.Foo = &fooTyped
	}
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Bar
type Bar struct {
	// +kubebuilder:validation:Required
	Size int `json:"size"`
}

var _ genruntime.ArmTransformer = &Bar{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (bar *Bar) ConvertToArm(name string) (interface{}, error) {
	if bar == nil {
		return nil, nil
	}
	var result BarArm
	result.Size = bar.Size
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (bar *Bar) CreateEmptyArmValue() interface{} {
	return BarArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (bar *Bar) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(BarArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected BarArm, got %T", armInput)
	}
	bar.Size = typedInput.Size
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Baz
type Baz struct {
	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled"`
}

var _ genruntime.ArmTransformer = &Baz{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (baz *Baz) ConvertToArm(name string) (interface{}, error) {
	if baz == nil {
		return nil, nil
	}
	var result BazArm
	result.Enabled = baz.Enabled
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (baz *Baz) CreateEmptyArmValue() interface{} {
	return BazArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (baz *Baz) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(BazArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected BazArm, got %T", armInput)
	}
	baz.Enabled = typedInput.Enabled
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo struct {
	Name *string `json:"name,omitempty"`
}

var _ genruntime.ArmTransformer = &Foo{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (foo *Foo) ConvertToArm(name string) (interface{}, error) {
	if foo == nil {
		return nil, nil
	}
	var result FooArm
	if foo.Name != nil {
		nameTyped := *foo.Name
		result.Name = &nameTyped
	}
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (foo *Foo) CreateEmptyArmValue() interface{} {
	return FooArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (foo *Foo) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FooArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected FooArm, got %T", armInput)
	}
	if typedInput.Name != nil {
		nameTyped := *typedInput.Name
		foo.Name = &nameTyped
	}
	return nil
}

func init() {
	SchemeBuilder.Register(&FakeResource{}, &FakeResourceList{})
}
