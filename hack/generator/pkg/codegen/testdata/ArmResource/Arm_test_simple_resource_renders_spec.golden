// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200101

import (
	"fmt"
	"github.com/Azure/k8s-infra/hack/generated/pkg/genruntime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FakeResourceSpec `json:"spec,omitempty"`
}

type FakeResourceSpecArm struct {
	ApiVersion FakeResourceSpecApiVersion `json:"apiVersion"`
	Name       string                     `json:"name"`
	Type       FakeResourceSpecType       `json:"type"`
}

type FakeResourceSpec struct {

	// +kubebuilder:validation:Required
	ApiVersion FakeResourceSpecApiVersion `json:"apiVersion"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `json:"owner" group:"microsoft.resources" kind:"ResourceGroup"`
}

var _ genruntime.ArmTransformer = &FakeResourceSpec{}

// FromArm converts from an Azure ARM object to a Kubernetes CRD object
func (fakeResourceSpec *FakeResourceSpec) FromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResourceSpecArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for FromArm function. Expected FakeResourceSpecArm, got %T", armInput)
	}
	fakeResourceSpec.ApiVersion = typedInput.ApiVersion
	fakeResourceSpec.AzureName = genruntime.ExtractKubernetesResourceNameFromArmName(typedInput.Name)
	fakeResourceSpec.Owner = owner
	return nil
}

// ToArm converts from a Kubernetes CRD object to an ARM object
func (fakeResourceSpec *FakeResourceSpec) ToArm(owningName string) (interface{}, error) {
	if fakeResourceSpec == nil {
		return nil, nil
	}
	result := FakeResourceSpecArm{}
	result.ApiVersion = fakeResourceSpec.ApiVersion
	result.Name = genruntime.CreateArmResourceNameForDeployment(owningName, fakeResourceSpec.AzureName)
	result.Type = FakeResourceSpecTypeMicrosoftAzureFakeResource
	return result, nil
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type FakeResourceSpecApiVersion string

const FakeResourceSpecApiVersion20200601 = FakeResourceSpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/FakeResource"}
type FakeResourceSpecType string

const FakeResourceSpecTypeMicrosoftAzureFakeResource = FakeResourceSpecType("Microsoft.Azure/FakeResource")

func init() {
	SchemeBuilder.Register(&FakeResource{})
}
