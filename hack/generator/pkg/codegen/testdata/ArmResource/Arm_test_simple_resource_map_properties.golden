// +build !ignore_autogenerated
// Code generated by k8s-infra. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20200101

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"fmt"
	"github.com/Azure/k8s-infra/hack/generated/pkg/genruntime"
)

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FakeResource_Spec `json:"spec,omitempty"`
}

var _ genruntime.KubernetesResource = &FakeResource{}

// AzureName returns the Azure name of the resource
func (fakeResource *FakeResource) AzureName() string {
	return fakeResource.Spec.AzureName
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (fakeResource *FakeResource) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(fakeResource.Spec)
	return &genruntime.ResourceReference{Name: fakeResource.Spec.Owner.Name, Group: group, Kind: kind}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FakeResource `json:"items"`
}

type FakeResource_SpecArm struct {
	ApiVersion   FakeResourceSpecApiVersion   `json:"apiVersion"`
	MapFoo       map[string]FooArm            `json:"mapFoo"`
	MapOfArrays  map[string][]FooArm          `json:"mapOfArrays,omitempty"`
	MapOfEnums   map[string]Color             `json:"mapOfEnums,omitempty"`
	MapOfMaps    map[string]map[string]FooArm `json:"mapOfMaps,omitempty"`
	MapOfStrings map[string]string            `json:"mapOfStrings,omitempty"`
	Name         string                       `json:"name"`
	Type         FakeResourceSpecType         `json:"type"`
}

var _ genruntime.ArmResourceSpec = &FakeResource_SpecArm{}

// GetApiVersion returns the ApiVersion of the resource
func (fakeResourceSpecArm FakeResource_SpecArm) GetApiVersion() string {
	return string(fakeResourceSpecArm.ApiVersion)
}

// GetName returns the Name of the resource
func (fakeResourceSpecArm FakeResource_SpecArm) GetName() string {
	return fakeResourceSpecArm.Name
}

// GetType returns the Type of the resource
func (fakeResourceSpecArm FakeResource_SpecArm) GetType() string {
	return string(fakeResourceSpecArm.Type)
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Color
// +kubebuilder:validation:Enum={"blue","green","red"}
type Color string

const (
	ColorBlue  = Color("blue")
	ColorGreen = Color("green")
	ColorRed   = Color("red")
)

// +kubebuilder:validation:Enum={"2020-06-01"}
type FakeResourceSpecApiVersion string

const FakeResourceSpecApiVersion20200601 = FakeResourceSpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/FakeResource"}
type FakeResourceSpecType string

const FakeResourceSpecTypeMicrosoftAzureFakeResource = FakeResourceSpecType("Microsoft.Azure/FakeResource")

type FakeResource_Spec struct {

	// +kubebuilder:validation:Required
	ApiVersion FakeResourceSpecApiVersion `json:"apiVersion"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	MapFoo       map[string]Foo            `json:"mapFoo"`
	MapOfArrays  map[string][]Foo          `json:"mapOfArrays,omitempty"`
	MapOfEnums   map[string]Color          `json:"mapOfEnums,omitempty"`
	MapOfMaps    map[string]map[string]Foo `json:"mapOfMaps,omitempty"`
	MapOfStrings map[string]string         `json:"mapOfStrings,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources.infra.azure.com" json:"owner" kind:"ResourceGroup"`
}

var _ genruntime.ArmTransformer = &FakeResource_Spec{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (fakeResourceSpec *FakeResource_Spec) ConvertToArm(name string) (interface{}, error) {
	if fakeResourceSpec == nil {
		return nil, nil
	}
	var result FakeResource_SpecArm
	result.ApiVersion = fakeResourceSpec.ApiVersion
	result.MapFoo = make(map[string]FooArm)
	for key, value := range fakeResourceSpec.MapFoo {
		elem, err := value.ConvertToArm(name)
		if err != nil {
			return nil, err
		}
		elemTyped := elem.(FooArm)
		result.MapFoo[key] = elemTyped
	}
	result.MapOfArrays = make(map[string][]FooArm)
	for key, value := range fakeResourceSpec.MapOfArrays {
		var elemTyped []FooArm
		for _, item := range value {
			elem, err := item.ConvertToArm(name)
			if err != nil {
				return nil, err
			}
			elemTyped1 := elem.(FooArm)
			elemTyped = append(elemTyped, elemTyped1)
		}
		result.MapOfArrays[key] = elemTyped
	}
	result.MapOfEnums = make(map[string]Color)
	for key, value := range fakeResourceSpec.MapOfEnums {
		elemTyped := value
		result.MapOfEnums[key] = elemTyped
	}
	result.MapOfMaps = make(map[string]map[string]FooArm)
	for key, value := range fakeResourceSpec.MapOfMaps {
		elemTyped := make(map[string]FooArm)
		for key, value := range value {
			elem, err := value.ConvertToArm(name)
			if err != nil {
				return nil, err
			}
			elemTyped1 := elem.(FooArm)
			elemTyped[key] = elemTyped1
		}
		result.MapOfMaps[key] = elemTyped
	}
	result.MapOfStrings = make(map[string]string)
	for key, value := range fakeResourceSpec.MapOfStrings {
		elemTyped := value
		result.MapOfStrings[key] = elemTyped
	}
	result.Name = name
	result.Type = FakeResourceSpecTypeMicrosoftAzureFakeResource
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (fakeResourceSpec *FakeResource_Spec) CreateEmptyArmValue() interface{} {
	return FakeResource_SpecArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (fakeResourceSpec *FakeResource_Spec) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_SpecArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected FakeResource_SpecArm, got %T", armInput)
	}
	fakeResourceSpec.ApiVersion = typedInput.ApiVersion
	fakeResourceSpec.AzureName = genruntime.ExtractKubernetesResourceNameFromArmName(typedInput.Name)
	var err error
	if typedInput.MapFoo != nil {
		fakeResourceSpec.MapFoo = make(map[string]Foo)
		for key, value := range typedInput.MapFoo {
			var elem Foo
			err = elem.PopulateFromArm(owner, value)
			if err != nil {
				return err
			}
			fakeResourceSpec.MapFoo[key] = elem
		}
	}
	if typedInput.MapOfArrays != nil {
		fakeResourceSpec.MapOfArrays = make(map[string][]Foo)
		for key, value := range typedInput.MapOfArrays {
			var elem []Foo
			for _, item := range value {
				var elem1 Foo
				err = elem1.PopulateFromArm(owner, item)
				if err != nil {
					return err
				}
				elem = append(elem, elem1)
			}
			fakeResourceSpec.MapOfArrays[key] = elem
		}
	}
	if typedInput.MapOfEnums != nil {
		fakeResourceSpec.MapOfEnums = make(map[string]Color)
		for key, value := range typedInput.MapOfEnums {
			fakeResourceSpec.MapOfEnums[key] = value
		}
	}
	if typedInput.MapOfMaps != nil {
		fakeResourceSpec.MapOfMaps = make(map[string]map[string]Foo)
		for key, value := range typedInput.MapOfMaps {
			if value != nil {
				elem := make(map[string]Foo)
				for key, value := range value {
					var elem1 Foo
					err = elem1.PopulateFromArm(owner, value)
					if err != nil {
						return err
					}
					elem[key] = elem1
				}
				fakeResourceSpec.MapOfMaps[key] = elem
			}
		}
	}
	if typedInput.MapOfStrings != nil {
		fakeResourceSpec.MapOfStrings = make(map[string]string)
		for key, value := range typedInput.MapOfStrings {
			fakeResourceSpec.MapOfStrings[key] = value
		}
	}
	fakeResourceSpec.Owner = owner
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type FooArm struct {
	FooName *string `json:"fooName,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo struct {
	FooName *string `json:"fooName,omitempty"`
}

var _ genruntime.ArmTransformer = &Foo{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (foo *Foo) ConvertToArm(name string) (interface{}, error) {
	if foo == nil {
		return nil, nil
	}
	var result FooArm
	if foo.FooName != nil {
		fooNameTyped := *foo.FooName
		result.FooName = &fooNameTyped
	}
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (foo *Foo) CreateEmptyArmValue() interface{} {
	return FooArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (foo *Foo) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FooArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected FooArm, got %T", armInput)
	}
	if typedInput.FooName != nil {
		fooNameTyped := *typedInput.FooName
		foo.FooName = &fooNameTyped
	}
	return nil
}

func init() {
	SchemeBuilder.Register(&FakeResource{}, &FakeResourceList{})
}
