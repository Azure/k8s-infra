// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200101

import (
	"fmt"
	"github.com/Azure/k8s-infra/hack/generated/pkg/genruntime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FakeResource_Spec `json:"spec,omitempty"`
}

// +kubebuilder:object:root=true
type FakeResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FakeResource `json:"items"`
}

type FakeResource_SpecArm struct {
	ApiVersion  FakeResourceSpecApiVersion   `json:"apiVersion"`
	MapFoo      map[string]FooArm            `json:"mapFoo"`
	MapOfArrays map[string][]FooArm          `json:"mapOfArrays,omitempty"`
	MapOfEnums  map[string]Color             `json:"mapOfEnums,omitempty"`
	MapOfMaps   map[string]map[string]FooArm `json:"mapOfMaps,omitempty"`
	Name        string                       `json:"name"`
	Type        FakeResourceSpecType         `json:"type"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Color

// +kubebuilder:validation:Enum={"blue","green","red"}
type Color string

const (
	ColorBlue  = Color("blue")
	ColorGreen = Color("green")
	ColorRed   = Color("red")
)

// +kubebuilder:validation:Enum={"2020-06-01"}
type FakeResourceSpecApiVersion string

const FakeResourceSpecApiVersion20200601 = FakeResourceSpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/FakeResource"}
type FakeResourceSpecType string

const FakeResourceSpecTypeMicrosoftAzureFakeResource = FakeResourceSpecType("Microsoft.Azure/FakeResource")

type FakeResource_Spec struct {

	// +kubebuilder:validation:Required
	ApiVersion FakeResourceSpecApiVersion `json:"apiVersion"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	MapFoo      map[string]Foo            `json:"mapFoo"`
	MapOfArrays map[string][]Foo          `json:"mapOfArrays,omitempty"`
	MapOfEnums  map[string]Color          `json:"mapOfEnums,omitempty"`
	MapOfMaps   map[string]map[string]Foo `json:"mapOfMaps,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources" json:"owner" kind:"ResourceGroup"`
}

var _ genruntime.ArmTransformer = &FakeResource_Spec{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (fakeResourceSpec *FakeResource_Spec) ConvertToArm(owningName string) (interface{}, error) {
	if fakeResourceSpec == nil {
		return nil, nil
	}
	result := FakeResource_SpecArm{}
	result.ApiVersion = fakeResourceSpec.ApiVersion
	result.MapFoo = make(map[string]FooArm)
	if fakeResourceSpec.MapFoo != nil {
		for key, value := range fakeResourceSpec.MapFoo {
			elem, err := value.ConvertToArm(owningName)
			if err != nil {
				return nil, err
			}
			elemTyped := elem.(FooArm)
			result.MapFoo[key] = elemTyped
		}
	}
	result.MapOfArrays = make(map[string][]FooArm)
	if fakeResourceSpec.MapOfArrays != nil {
		for key, value := range fakeResourceSpec.MapOfArrays {
			var elemTyped []FooArm
			for _, item := range value {
				elem, err := item.ConvertToArm(owningName)
				if err != nil {
					return nil, err
				}
				elemTyped1 := elem.(FooArm)
				elemTyped = append(elemTyped, elemTyped1)
			}
			result.MapOfArrays[key] = elemTyped
		}
	}
	result.MapOfEnums = fakeResourceSpec.MapOfEnums
	result.MapOfMaps = make(map[string]map[string]FooArm)
	if fakeResourceSpec.MapOfMaps != nil {
		for key, value := range fakeResourceSpec.MapOfMaps {
			elemTyped := make(map[string]FooArm)
			if value != nil {
				for key, value := range value {
					elem, err := value.ConvertToArm(owningName)
					if err != nil {
						return nil, err
					}
					elemTyped1 := elem.(FooArm)
					elemTyped[key] = elemTyped1
				}
			}
			result.MapOfMaps[key] = elemTyped
		}
	}
	result.Name = genruntime.CreateArmResourceNameForDeployment(owningName, fakeResourceSpec.AzureName)
	result.Type = FakeResourceSpecTypeMicrosoftAzureFakeResource
	return result, nil
}

// PopulateFromArm converts from an Azure ARM object to a Kubernetes CRD object
func (fakeResourceSpec *FakeResource_Spec) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_SpecArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for FromArm function. Expected FakeResource_SpecArm, got %T", armInput)
	}
	fakeResourceSpec.ApiVersion = typedInput.ApiVersion
	fakeResourceSpec.AzureName = genruntime.ExtractKubernetesResourceNameFromArmName(typedInput.Name)
	var err error
	if typedInput.MapFoo != nil {
		fakeResourceSpec.MapFoo = make(map[string]Foo)
		for key, value := range typedInput.MapFoo {
			elem := Foo{}
			err = elem.PopulateFromArm(owner, value)
			if err != nil {
				return err
			}
			fakeResourceSpec.MapFoo[key] = elem
		}
	}
	if typedInput.MapOfArrays != nil {
		fakeResourceSpec.MapOfArrays = make(map[string][]Foo)
		for key, value := range typedInput.MapOfArrays {
			var elem []Foo
			for _, item := range value {
				elem1 := Foo{}
				err = elem1.PopulateFromArm(owner, item)
				if err != nil {
					return err
				}
				elem = append(elem, elem1)
			}
			fakeResourceSpec.MapOfArrays[key] = elem
		}
	}
	fakeResourceSpec.MapOfEnums = typedInput.MapOfEnums
	if typedInput.MapOfMaps != nil {
		fakeResourceSpec.MapOfMaps = make(map[string]map[string]Foo)
		for key, value := range typedInput.MapOfMaps {
			if value != nil {
				elem := make(map[string]Foo)
				for key, value := range value {
					elem1 := Foo{}
					err = elem1.PopulateFromArm(owner, value)
					if err != nil {
						return err
					}
					elem[key] = elem1
				}
				fakeResourceSpec.MapOfMaps[key] = elem
			}
		}
	}
	fakeResourceSpec.Owner = owner
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type FooArm struct {
	Name *string `json:"name,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo struct {
	Name *string `json:"name,omitempty"`
}

var _ genruntime.ArmTransformer = &Foo{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (foo *Foo) ConvertToArm(owningName string) (interface{}, error) {
	if foo == nil {
		return nil, nil
	}
	result := FooArm{}
	result.Name = foo.Name
	return result, nil
}

// PopulateFromArm converts from an Azure ARM object to a Kubernetes CRD object
func (foo *Foo) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FooArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for FromArm function. Expected FooArm, got %T", armInput)
	}
	foo.Name = typedInput.Name
	return nil
}
func init() {
	SchemeBuilder.Register(&FakeResource{}, &FakeResourceList{})
}
