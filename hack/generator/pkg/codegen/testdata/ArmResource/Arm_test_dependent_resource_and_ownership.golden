// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200101

import (
	"fmt"
	"github.com/Azure/k8s-infra/hack/generated/pkg/genruntime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/A
type A struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ASpec `json:"spec,omitempty"`
}

type ASpecArm struct {
	ApiVersion ASpecApiVersion `json:"apiVersion"`
	Name       string          `json:"name"`
	Type       ASpecType       `json:"type"`
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/B
type B struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BSpec `json:"spec,omitempty"`
}

type BSpecArm struct {
	ApiVersion BSpecApiVersion `json:"apiVersion"`
	Name       string          `json:"name"`
	Type       BSpecType       `json:"type"`
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/C
type C struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CSpec `json:"spec,omitempty"`
}

type CSpecArm struct {
	ApiVersion CSpecApiVersion `json:"apiVersion"`
	Name       string          `json:"name"`
	Type       CSpecType       `json:"type"`
}

type ASpec struct {

	// +kubebuilder:validation:Required
	ApiVersion ASpecApiVersion `json:"apiVersion"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources" json:"owner" kind:"ResourceGroup"`
}

var _ genruntime.ArmTransformer = &ASpec{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (aSpec *ASpec) ConvertToArm(owningName string) (interface{}, error) {
	if aSpec == nil {
		return nil, nil
	}
	result := ASpecArm{}
	result.ApiVersion = aSpec.ApiVersion
	result.Name = genruntime.CreateArmResourceNameForDeployment(owningName, aSpec.AzureName)
	result.Type = ASpecTypeMicrosoftAzureA
	return result, nil
}

// PopulateFromArm converts from an Azure ARM object to a Kubernetes CRD object
func (aSpec *ASpec) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(ASpecArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for FromArm function. Expected ASpecArm, got %T", armInput)
	}
	aSpec.ApiVersion = typedInput.ApiVersion
	aSpec.AzureName = genruntime.ExtractKubernetesResourceNameFromArmName(typedInput.Name)
	aSpec.Owner = owner
	return nil
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type ASpecApiVersion string

const ASpecApiVersion20200601 = ASpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/A"}
type ASpecType string

const ASpecTypeMicrosoftAzureA = ASpecType("Microsoft.Azure/A")

type BSpec struct {

	// +kubebuilder:validation:Required
	ApiVersion BSpecApiVersion `json:"apiVersion"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"test" json:"owner" kind:"A"`
}

var _ genruntime.ArmTransformer = &BSpec{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (bSpec *BSpec) ConvertToArm(owningName string) (interface{}, error) {
	if bSpec == nil {
		return nil, nil
	}
	result := BSpecArm{}
	result.ApiVersion = bSpec.ApiVersion
	result.Name = genruntime.CreateArmResourceNameForDeployment(owningName, bSpec.AzureName)
	result.Type = BSpecTypeMicrosoftAzureB
	return result, nil
}

// PopulateFromArm converts from an Azure ARM object to a Kubernetes CRD object
func (bSpec *BSpec) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(BSpecArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for FromArm function. Expected BSpecArm, got %T", armInput)
	}
	bSpec.ApiVersion = typedInput.ApiVersion
	bSpec.AzureName = genruntime.ExtractKubernetesResourceNameFromArmName(typedInput.Name)
	bSpec.Owner = owner
	return nil
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type BSpecApiVersion string

const BSpecApiVersion20200601 = BSpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/B"}
type BSpecType string

const BSpecTypeMicrosoftAzureB = BSpecType("Microsoft.Azure/B")

type CSpec struct {

	// +kubebuilder:validation:Required
	ApiVersion CSpecApiVersion `json:"apiVersion"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"test" json:"owner" kind:"B"`
}

var _ genruntime.ArmTransformer = &CSpec{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (cSpec *CSpec) ConvertToArm(owningName string) (interface{}, error) {
	if cSpec == nil {
		return nil, nil
	}
	result := CSpecArm{}
	result.ApiVersion = cSpec.ApiVersion
	result.Name = genruntime.CreateArmResourceNameForDeployment(owningName, cSpec.AzureName)
	result.Type = CSpecTypeMicrosoftAzureC
	return result, nil
}

// PopulateFromArm converts from an Azure ARM object to a Kubernetes CRD object
func (cSpec *CSpec) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(CSpecArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for FromArm function. Expected CSpecArm, got %T", armInput)
	}
	cSpec.ApiVersion = typedInput.ApiVersion
	cSpec.AzureName = genruntime.ExtractKubernetesResourceNameFromArmName(typedInput.Name)
	cSpec.Owner = owner
	return nil
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type CSpecApiVersion string

const CSpecApiVersion20200601 = CSpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/C"}
type CSpecType string

const CSpecTypeMicrosoftAzureC = CSpecType("Microsoft.Azure/C")

func init() {
	SchemeBuilder.Register(&A{}, &B{}, &C{})
}
