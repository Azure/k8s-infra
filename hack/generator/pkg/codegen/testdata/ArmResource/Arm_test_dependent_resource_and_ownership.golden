// Code generated by k8s-infra. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20200101

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"fmt"
	"github.com/Azure/k8s-infra/hack/generated/pkg/genruntime"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/A
type A struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              A_Spec `json:"spec,omitempty"`
}

// +kubebuilder:webhook:path=/mutate-test-infra-azure-com-v20200101-a,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.infra.azure.com,resources=as,verbs=create;update,versions=v20200101,name=default.v20200101.as.test.infra.azure.com

var _ admission.Defaulter = &A{}

// Default defaults the Azure name of the resource to the Kubernetes name
func (a *A) Default() {
	if a.Spec.AzureName == "" {
		a.Spec.AzureName = a.Name
	}
}

var _ genruntime.KubernetesResource = &A{}

// AzureName returns the Azure name of the resource
func (a *A) AzureName() string {
	return a.Spec.AzureName
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (a *A) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(a.Spec)
	return &genruntime.ResourceReference{Name: a.Spec.Owner.Name, Group: group, Kind: kind}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/A
type AList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []A `json:"items"`
}

type A_SpecArm struct {
	ApiVersion ASpecApiVersion `json:"apiVersion"`
	Name       string          `json:"name"`
	Type       ASpecType       `json:"type"`
}

var _ genruntime.ArmResourceSpec = &A_SpecArm{}

// GetApiVersion returns the ApiVersion of the resource
func (aSpecArm A_SpecArm) GetApiVersion() string {
	return string(aSpecArm.ApiVersion)
}

// GetName returns the Name of the resource
func (aSpecArm A_SpecArm) GetName() string {
	return aSpecArm.Name
}

// GetType returns the Type of the resource
func (aSpecArm A_SpecArm) GetType() string {
	return string(aSpecArm.Type)
}

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/B
type B struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              B_Spec `json:"spec,omitempty"`
}

// +kubebuilder:webhook:path=/mutate-test-infra-azure-com-v20200101-b,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.infra.azure.com,resources=bs,verbs=create;update,versions=v20200101,name=default.v20200101.bs.test.infra.azure.com

var _ admission.Defaulter = &B{}

// Default defaults the Azure name of the resource to the Kubernetes name
func (b *B) Default() {
	if b.Spec.AzureName == "" {
		b.Spec.AzureName = b.Name
	}
}

var _ genruntime.KubernetesResource = &B{}

// AzureName returns the Azure name of the resource
func (b *B) AzureName() string {
	return b.Spec.AzureName
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (b *B) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(b.Spec)
	return &genruntime.ResourceReference{Name: b.Spec.Owner.Name, Group: group, Kind: kind}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/B
type BList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []B `json:"items"`
}

type B_SpecArm struct {
	ApiVersion BSpecApiVersion `json:"apiVersion"`
	Name       string          `json:"name"`
	Type       BSpecType       `json:"type"`
}

var _ genruntime.ArmResourceSpec = &B_SpecArm{}

// GetApiVersion returns the ApiVersion of the resource
func (bSpecArm B_SpecArm) GetApiVersion() string {
	return string(bSpecArm.ApiVersion)
}

// GetName returns the Name of the resource
func (bSpecArm B_SpecArm) GetName() string {
	return bSpecArm.Name
}

// GetType returns the Type of the resource
func (bSpecArm B_SpecArm) GetType() string {
	return string(bSpecArm.Type)
}

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/C
type C struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              C_Spec `json:"spec,omitempty"`
}

// +kubebuilder:webhook:path=/mutate-test-infra-azure-com-v20200101-c,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.infra.azure.com,resources=cs,verbs=create;update,versions=v20200101,name=default.v20200101.cs.test.infra.azure.com

var _ admission.Defaulter = &C{}

// Default defaults the Azure name of the resource to the Kubernetes name
func (c *C) Default() {
	if c.Spec.AzureName == "" {
		c.Spec.AzureName = c.Name
	}
}

var _ genruntime.KubernetesResource = &C{}

// AzureName returns the Azure name of the resource
func (c *C) AzureName() string {
	return c.Spec.AzureName
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (c *C) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(c.Spec)
	return &genruntime.ResourceReference{Name: c.Spec.Owner.Name, Group: group, Kind: kind}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/C
type CList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []C `json:"items"`
}

type C_SpecArm struct {
	ApiVersion CSpecApiVersion `json:"apiVersion"`
	Name       string          `json:"name"`
	Type       CSpecType       `json:"type"`
}

var _ genruntime.ArmResourceSpec = &C_SpecArm{}

// GetApiVersion returns the ApiVersion of the resource
func (cSpecArm C_SpecArm) GetApiVersion() string {
	return string(cSpecArm.ApiVersion)
}

// GetName returns the Name of the resource
func (cSpecArm C_SpecArm) GetName() string {
	return cSpecArm.Name
}

// GetType returns the Type of the resource
func (cSpecArm C_SpecArm) GetType() string {
	return string(cSpecArm.Type)
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type ASpecApiVersion string

const ASpecApiVersion20200601 = ASpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/A"}
type ASpecType string

const ASpecTypeMicrosoftAzureA = ASpecType("Microsoft.Azure/A")

type A_Spec struct {
	// +kubebuilder:validation:Required
	ApiVersion ASpecApiVersion `json:"apiVersion"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources.infra.azure.com" json:"owner" kind:"ResourceGroup"`
}

var _ genruntime.ArmTransformer = &A_Spec{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (aSpec *A_Spec) ConvertToArm(name string) (interface{}, error) {
	if aSpec == nil {
		return nil, nil
	}
	var result A_SpecArm
	result.ApiVersion = aSpec.ApiVersion
	result.Name = name
	result.Type = ASpecTypeMicrosoftAzureA
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (aSpec *A_Spec) CreateEmptyArmValue() interface{} {
	return A_SpecArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (aSpec *A_Spec) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(A_SpecArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected A_SpecArm, got %T", armInput)
	}
	aSpec.ApiVersion = typedInput.ApiVersion
	aSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromArmName(typedInput.Name))
	aSpec.Owner = owner
	return nil
}

// SetAzureName sets the Azure name of the resource
func (aSpec *A_Spec) SetAzureName(azureName string) { aSpec.AzureName = azureName }

// +kubebuilder:validation:Enum={"2020-06-01"}
type BSpecApiVersion string

const BSpecApiVersion20200601 = BSpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/B"}
type BSpecType string

const BSpecTypeMicrosoftAzureB = BSpecType("Microsoft.Azure/B")

type B_Spec struct {
	// +kubebuilder:validation:Required
	ApiVersion BSpecApiVersion `json:"apiVersion"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"test.infra.azure.com" json:"owner" kind:"A"`
}

var _ genruntime.ArmTransformer = &B_Spec{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (bSpec *B_Spec) ConvertToArm(name string) (interface{}, error) {
	if bSpec == nil {
		return nil, nil
	}
	var result B_SpecArm
	result.ApiVersion = bSpec.ApiVersion
	result.Name = name
	result.Type = BSpecTypeMicrosoftAzureB
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (bSpec *B_Spec) CreateEmptyArmValue() interface{} {
	return B_SpecArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (bSpec *B_Spec) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(B_SpecArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected B_SpecArm, got %T", armInput)
	}
	bSpec.ApiVersion = typedInput.ApiVersion
	bSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromArmName(typedInput.Name))
	bSpec.Owner = owner
	return nil
}

// SetAzureName sets the Azure name of the resource
func (bSpec *B_Spec) SetAzureName(azureName string) { bSpec.AzureName = azureName }

// +kubebuilder:validation:Enum={"2020-06-01"}
type CSpecApiVersion string

const CSpecApiVersion20200601 = CSpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/C"}
type CSpecType string

const CSpecTypeMicrosoftAzureC = CSpecType("Microsoft.Azure/C")

type C_Spec struct {
	// +kubebuilder:validation:Required
	ApiVersion CSpecApiVersion `json:"apiVersion"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"test.infra.azure.com" json:"owner" kind:"B"`
}

var _ genruntime.ArmTransformer = &C_Spec{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (cSpec *C_Spec) ConvertToArm(name string) (interface{}, error) {
	if cSpec == nil {
		return nil, nil
	}
	var result C_SpecArm
	result.ApiVersion = cSpec.ApiVersion
	result.Name = name
	result.Type = CSpecTypeMicrosoftAzureC
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (cSpec *C_Spec) CreateEmptyArmValue() interface{} {
	return C_SpecArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (cSpec *C_Spec) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(C_SpecArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected C_SpecArm, got %T", armInput)
	}
	cSpec.ApiVersion = typedInput.ApiVersion
	cSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromArmName(typedInput.Name))
	cSpec.Owner = owner
	return nil
}

// SetAzureName sets the Azure name of the resource
func (cSpec *C_Spec) SetAzureName(azureName string) { cSpec.AzureName = azureName }

func init() {
	SchemeBuilder.Register(&A{}, &AList{}, &B{}, &BList{}, &C{}, &CList{})
}
