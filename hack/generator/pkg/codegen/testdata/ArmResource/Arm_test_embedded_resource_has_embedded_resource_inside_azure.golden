// Code generated by k8s-infra. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200101

import (
	"fmt"
	"github.com/Azure/k8s-infra/hack/generated/pkg/genruntime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=test.infra.azure.com,resources=as,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.infra.azure.com,resources={as/status,as/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/A
type A struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              A_Spec `json:"spec,omitempty"`
}

// +kubebuilder:webhook:path=/mutate-test-infra-azure-com-v1alpha1api20200101-a,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.infra.azure.com,resources=as,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.as.test.infra.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &A{}

// Default defaults the Azure name of the resource to the Kubernetes name
func (a *A) Default() {
	if a.Spec.AzureName == "" {
		a.Spec.AzureName = a.Name
	}
}

var _ genruntime.KubernetesResource = &A{}

// AzureName returns the Azure name of the resource
func (a *A) AzureName() string {
	return a.Spec.AzureName
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (a *A) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(a.Spec)
	return &genruntime.ResourceReference{Name: a.Spec.Owner.Name, Group: group, Kind: kind}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/A
type AList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []A `json:"items"`
}

type A_SpecArm struct {
	ApiVersion ASpecApiVersion `json:"apiVersion"`
	Name       string          `json:"name"`
	Properties *APropertiesArm `json:"properties,omitempty"`
	Type       ASpecType       `json:"type"`
}

var _ genruntime.ArmResourceSpec = &A_SpecArm{}

// GetApiVersion returns the ApiVersion of the resource
func (aSpecArm A_SpecArm) GetApiVersion() string {
	return string(aSpecArm.ApiVersion)
}

// GetName returns the Name of the resource
func (aSpecArm A_SpecArm) GetName() string {
	return aSpecArm.Name
}

// GetType returns the Type of the resource
func (aSpecArm A_SpecArm) GetType() string {
	return string(aSpecArm.Type)
}

// +kubebuilder:rbac:groups=test.infra.azure.com,resources=bs,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.infra.azure.com,resources={bs/status,bs/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/B
type B struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              B_Spec `json:"spec,omitempty"`
}

// +kubebuilder:webhook:path=/mutate-test-infra-azure-com-v1alpha1api20200101-b,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.infra.azure.com,resources=bs,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.bs.test.infra.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &B{}

// Default defaults the Azure name of the resource to the Kubernetes name
func (b *B) Default() {
	if b.Spec.AzureName == "" {
		b.Spec.AzureName = b.Name
	}
}

var _ genruntime.KubernetesResource = &B{}

// AzureName returns the Azure name of the resource
func (b *B) AzureName() string {
	return b.Spec.AzureName
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (b *B) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(b.Spec)
	return &genruntime.ResourceReference{Name: b.Spec.Owner.Name, Group: group, Kind: kind}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/B
type BList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []B `json:"items"`
}

type B_SpecArm struct {
	ApiVersion BSpecApiVersion `json:"apiVersion"`
	Name       string          `json:"name"`
	Properties *BPropertiesArm `json:"properties,omitempty"`
	Type       BSpecType       `json:"type"`
}

var _ genruntime.ArmResourceSpec = &B_SpecArm{}

// GetApiVersion returns the ApiVersion of the resource
func (bSpecArm B_SpecArm) GetApiVersion() string {
	return string(bSpecArm.ApiVersion)
}

// GetName returns the Name of the resource
func (bSpecArm B_SpecArm) GetName() string {
	return bSpecArm.Name
}

// GetType returns the Type of the resource
func (bSpecArm B_SpecArm) GetType() string {
	return string(bSpecArm.Type)
}

// +kubebuilder:rbac:groups=test.infra.azure.com,resources=cs,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.infra.azure.com,resources={cs/status,cs/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/C
type C struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              C_Spec `json:"spec,omitempty"`
}

// +kubebuilder:webhook:path=/mutate-test-infra-azure-com-v1alpha1api20200101-c,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.infra.azure.com,resources=cs,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.cs.test.infra.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &C{}

// Default defaults the Azure name of the resource to the Kubernetes name
func (c *C) Default() {
	if c.Spec.AzureName == "" {
		c.Spec.AzureName = c.Name
	}
}

var _ genruntime.KubernetesResource = &C{}

// AzureName returns the Azure name of the resource
func (c *C) AzureName() string {
	return c.Spec.AzureName
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (c *C) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(c.Spec)
	return &genruntime.ResourceReference{Name: c.Spec.Owner.Name, Group: group, Kind: kind}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/C
type CList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []C `json:"items"`
}

type C_SpecArm struct {
	ApiVersion CSpecApiVersion `json:"apiVersion"`
	Name       string          `json:"name"`
	Properties *CPropertiesArm `json:"properties,omitempty"`
	Type       CSpecType       `json:"type"`
}

var _ genruntime.ArmResourceSpec = &C_SpecArm{}

// GetApiVersion returns the ApiVersion of the resource
func (cSpecArm C_SpecArm) GetApiVersion() string {
	return string(cSpecArm.ApiVersion)
}

// GetName returns the Name of the resource
func (cSpecArm C_SpecArm) GetName() string {
	return cSpecArm.Name
}

// GetType returns the Type of the resource
func (cSpecArm C_SpecArm) GetType() string {
	return string(cSpecArm.Type)
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/AProperties
type APropertiesArm struct {
	IntField    *int          `json:"intField,omitempty"`
	RefField    *BResourceArm `json:"refField,omitempty"`
	StringField *string       `json:"stringField,omitempty"`
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type ASpecApiVersion string

const ASpecApiVersion20200601 = ASpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/A"}
type ASpecType string

const ASpecTypeMicrosoftAzureA = ASpecType("Microsoft.Azure/A")

type A_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner      genruntime.KnownResourceReference `group:"microsoft.resources.infra.azure.com" json:"owner" kind:"ResourceGroup"`
	Properties *AProperties                      `json:"properties,omitempty"`
}

var _ genruntime.ArmTransformer = &A_Spec{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (aSpec *A_Spec) ConvertToArm(name string) (interface{}, error) {
	if aSpec == nil {
		return nil, nil
	}
	var result A_SpecArm
	result.ApiVersion = ASpecApiVersion20200601
	result.Name = name
	if aSpec.Properties != nil {
		properties, err := (*aSpec.Properties).ConvertToArm(name)
		if err != nil {
			return nil, err
		}
		propertiesTyped := properties.(APropertiesArm)
		result.Properties = &propertiesTyped
	}
	result.Type = ASpecTypeMicrosoftAzureA
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (aSpec *A_Spec) CreateEmptyArmValue() interface{} {
	return A_SpecArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (aSpec *A_Spec) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(A_SpecArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected A_SpecArm, got %T", armInput)
	}
	aSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromArmName(typedInput.Name))
	aSpec.Owner = owner
	var err error
	if typedInput.Properties != nil {
		var properties AProperties
		err = properties.PopulateFromArm(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		propertiesTyped := properties
		aSpec.Properties = &propertiesTyped
	}
	return nil
}

// SetAzureName sets the Azure name of the resource
func (aSpec *A_Spec) SetAzureName(azureName string) { aSpec.AzureName = azureName }

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/BProperties
type BPropertiesArm struct {
	EnumField *BPropertiesEnumField `json:"enumField,omitempty"`
	RefField  *CResourceArm         `json:"refField,omitempty"`
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type BSpecApiVersion string

const BSpecApiVersion20200601 = BSpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/B"}
type BSpecType string

const BSpecTypeMicrosoftAzureB = BSpecType("Microsoft.Azure/B")

type B_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner      genruntime.KnownResourceReference `group:"microsoft.resources.infra.azure.com" json:"owner" kind:"ResourceGroup"`
	Properties *BProperties                      `json:"properties,omitempty"`
}

var _ genruntime.ArmTransformer = &B_Spec{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (bSpec *B_Spec) ConvertToArm(name string) (interface{}, error) {
	if bSpec == nil {
		return nil, nil
	}
	var result B_SpecArm
	result.ApiVersion = BSpecApiVersion20200601
	result.Name = name
	if bSpec.Properties != nil {
		properties, err := (*bSpec.Properties).ConvertToArm(name)
		if err != nil {
			return nil, err
		}
		propertiesTyped := properties.(BPropertiesArm)
		result.Properties = &propertiesTyped
	}
	result.Type = BSpecTypeMicrosoftAzureB
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (bSpec *B_Spec) CreateEmptyArmValue() interface{} {
	return B_SpecArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (bSpec *B_Spec) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(B_SpecArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected B_SpecArm, got %T", armInput)
	}
	bSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromArmName(typedInput.Name))
	bSpec.Owner = owner
	var err error
	if typedInput.Properties != nil {
		var properties BProperties
		err = properties.PopulateFromArm(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		propertiesTyped := properties
		bSpec.Properties = &propertiesTyped
	}
	return nil
}

// SetAzureName sets the Azure name of the resource
func (bSpec *B_Spec) SetAzureName(azureName string) { bSpec.AzureName = azureName }

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/CProperties
type CPropertiesArm struct {
	IntField    *int    `json:"intField,omitempty"`
	StringField *string `json:"stringField,omitempty"`
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type CSpecApiVersion string

const CSpecApiVersion20200601 = CSpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/C"}
type CSpecType string

const CSpecTypeMicrosoftAzureC = CSpecType("Microsoft.Azure/C")

type C_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner      genruntime.KnownResourceReference `group:"microsoft.resources.infra.azure.com" json:"owner" kind:"ResourceGroup"`
	Properties *CProperties                      `json:"properties,omitempty"`
}

var _ genruntime.ArmTransformer = &C_Spec{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (cSpec *C_Spec) ConvertToArm(name string) (interface{}, error) {
	if cSpec == nil {
		return nil, nil
	}
	var result C_SpecArm
	result.ApiVersion = CSpecApiVersion20200601
	result.Name = name
	if cSpec.Properties != nil {
		properties, err := (*cSpec.Properties).ConvertToArm(name)
		if err != nil {
			return nil, err
		}
		propertiesTyped := properties.(CPropertiesArm)
		result.Properties = &propertiesTyped
	}
	result.Type = CSpecTypeMicrosoftAzureC
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (cSpec *C_Spec) CreateEmptyArmValue() interface{} {
	return C_SpecArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (cSpec *C_Spec) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(C_SpecArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected C_SpecArm, got %T", armInput)
	}
	cSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromArmName(typedInput.Name))
	cSpec.Owner = owner
	var err error
	if typedInput.Properties != nil {
		var properties CProperties
		err = properties.PopulateFromArm(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		propertiesTyped := properties
		cSpec.Properties = &propertiesTyped
	}
	return nil
}

// SetAzureName sets the Azure name of the resource
func (cSpec *C_Spec) SetAzureName(azureName string) { cSpec.AzureName = azureName }

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/AProperties
type AProperties struct {
	IntField    *int       `json:"intField,omitempty"`
	RefField    *BResource `json:"refField,omitempty"`
	StringField *string    `json:"stringField,omitempty"`
}

var _ genruntime.ArmTransformer = &AProperties{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (aProperties *AProperties) ConvertToArm(name string) (interface{}, error) {
	if aProperties == nil {
		return nil, nil
	}
	var result APropertiesArm
	if aProperties.IntField != nil {
		intFieldTyped := *aProperties.IntField
		result.IntField = &intFieldTyped
	}
	if aProperties.RefField != nil {
		refField, err := (*aProperties.RefField).ConvertToArm(name)
		if err != nil {
			return nil, err
		}
		refFieldTyped := refField.(BResourceArm)
		result.RefField = &refFieldTyped
	}
	if aProperties.StringField != nil {
		stringFieldTyped := *aProperties.StringField
		result.StringField = &stringFieldTyped
	}
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (aProperties *AProperties) CreateEmptyArmValue() interface{} {
	return APropertiesArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (aProperties *AProperties) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(APropertiesArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected APropertiesArm, got %T", armInput)
	}
	if typedInput.IntField != nil {
		intFieldTyped := *typedInput.IntField
		aProperties.IntField = &intFieldTyped
	}
	var err error
	if typedInput.RefField != nil {
		var refField BResource
		err = refField.PopulateFromArm(owner, *typedInput.RefField)
		if err != nil {
			return err
		}
		refFieldTyped := refField
		aProperties.RefField = &refFieldTyped
	}
	if typedInput.StringField != nil {
		stringFieldTyped := *typedInput.StringField
		aProperties.StringField = &stringFieldTyped
	}
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/BProperties
type BProperties struct {
	EnumField *BPropertiesEnumField `json:"enumField,omitempty"`
	RefField  *CResource            `json:"refField,omitempty"`
}

var _ genruntime.ArmTransformer = &BProperties{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (bProperties *BProperties) ConvertToArm(name string) (interface{}, error) {
	if bProperties == nil {
		return nil, nil
	}
	var result BPropertiesArm
	if bProperties.EnumField != nil {
		enumFieldTyped := *bProperties.EnumField
		result.EnumField = &enumFieldTyped
	}
	if bProperties.RefField != nil {
		refField, err := (*bProperties.RefField).ConvertToArm(name)
		if err != nil {
			return nil, err
		}
		refFieldTyped := refField.(CResourceArm)
		result.RefField = &refFieldTyped
	}
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (bProperties *BProperties) CreateEmptyArmValue() interface{} {
	return BPropertiesArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (bProperties *BProperties) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(BPropertiesArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected BPropertiesArm, got %T", armInput)
	}
	if typedInput.EnumField != nil {
		enumFieldTyped := *typedInput.EnumField
		bProperties.EnumField = &enumFieldTyped
	}
	var err error
	if typedInput.RefField != nil {
		var refField CResource
		err = refField.PopulateFromArm(owner, *typedInput.RefField)
		if err != nil {
			return err
		}
		refFieldTyped := refField
		bProperties.RefField = &refFieldTyped
	}
	return nil
}

// +kubebuilder:validation:Enum={"Qux"}
type BPropertiesEnumField string

const BPropertiesEnumFieldQux = BPropertiesEnumField("Qux")

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/BResource
type BResourceArm struct {
	Id *string `json:"id,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/CProperties
type CProperties struct {
	IntField    *int    `json:"intField,omitempty"`
	StringField *string `json:"stringField,omitempty"`
}

var _ genruntime.ArmTransformer = &CProperties{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (cProperties *CProperties) ConvertToArm(name string) (interface{}, error) {
	if cProperties == nil {
		return nil, nil
	}
	var result CPropertiesArm
	if cProperties.IntField != nil {
		intFieldTyped := *cProperties.IntField
		result.IntField = &intFieldTyped
	}
	if cProperties.StringField != nil {
		stringFieldTyped := *cProperties.StringField
		result.StringField = &stringFieldTyped
	}
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (cProperties *CProperties) CreateEmptyArmValue() interface{} {
	return CPropertiesArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (cProperties *CProperties) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(CPropertiesArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected CPropertiesArm, got %T", armInput)
	}
	if typedInput.IntField != nil {
		intFieldTyped := *typedInput.IntField
		cProperties.IntField = &intFieldTyped
	}
	if typedInput.StringField != nil {
		stringFieldTyped := *typedInput.StringField
		cProperties.StringField = &stringFieldTyped
	}
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/CResource
type CResourceArm struct {
	Id *string `json:"id,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/BResource
type BResource struct {
	Id *string `json:"id,omitempty"`
}

var _ genruntime.ArmTransformer = &BResource{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (bResource *BResource) ConvertToArm(name string) (interface{}, error) {
	if bResource == nil {
		return nil, nil
	}
	var result BResourceArm
	if bResource.Id != nil {
		idTyped := *bResource.Id
		result.Id = &idTyped
	}
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (bResource *BResource) CreateEmptyArmValue() interface{} {
	return BResourceArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (bResource *BResource) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(BResourceArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected BResourceArm, got %T", armInput)
	}
	if typedInput.Id != nil {
		idTyped := *typedInput.Id
		bResource.Id = &idTyped
	}
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/CResource
type CResource struct {
	Id *string `json:"id,omitempty"`
}

var _ genruntime.ArmTransformer = &CResource{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (cResource *CResource) ConvertToArm(name string) (interface{}, error) {
	if cResource == nil {
		return nil, nil
	}
	var result CResourceArm
	if cResource.Id != nil {
		idTyped := *cResource.Id
		result.Id = &idTyped
	}
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (cResource *CResource) CreateEmptyArmValue() interface{} {
	return CResourceArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (cResource *CResource) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(CResourceArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected CResourceArm, got %T", armInput)
	}
	if typedInput.Id != nil {
		idTyped := *typedInput.Id
		cResource.Id = &idTyped
	}
	return nil
}

func init() {
	SchemeBuilder.Register(&A{}, &AList{}, &B{}, &BList{}, &C{}, &CList{})
}
