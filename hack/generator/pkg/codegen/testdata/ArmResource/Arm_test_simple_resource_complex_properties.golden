// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200101

import (
	"fmt"
	"github.com/Azure/k8s-infra/hack/generated/pkg/genruntime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FakeResource_Spec `json:"spec,omitempty"`
}

// +kubebuilder:object:root=true
type FakeResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FakeResource `json:"items"`
}

type FakeResource_SpecArm struct {
	ApiVersion  FakeResourceSpecApiVersion `json:"apiVersion"`
	Color       *FakeResourceSpecColor     `json:"color,omitempty"`
	Foo         FooArm                     `json:"foo"`
	Name        string                     `json:"name"`
	OptionalFoo *FooArm                    `json:"optionalFoo,omitempty"`
	Type        FakeResourceSpecType       `json:"type"`
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type FakeResourceSpecApiVersion string

const FakeResourceSpecApiVersion20200601 = FakeResourceSpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"blue","green","red"}
type FakeResourceSpecColor string

const (
	FakeResourceSpecColorBlue  = FakeResourceSpecColor("blue")
	FakeResourceSpecColorGreen = FakeResourceSpecColor("green")
	FakeResourceSpecColorRed   = FakeResourceSpecColor("red")
)

// +kubebuilder:validation:Enum={"Microsoft.Azure/FakeResource"}
type FakeResourceSpecType string

const FakeResourceSpecTypeMicrosoftAzureFakeResource = FakeResourceSpecType("Microsoft.Azure/FakeResource")

type FakeResource_Spec struct {

	// +kubebuilder:validation:Required
	ApiVersion FakeResourceSpecApiVersion `json:"apiVersion"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string                 `json:"azureName"`
	Color     *FakeResourceSpecColor `json:"color,omitempty"`

	// +kubebuilder:validation:Required
	Foo         Foo  `json:"foo"`
	OptionalFoo *Foo `json:"optionalFoo,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources" json:"owner" kind:"ResourceGroup"`
}

var _ genruntime.ArmTransformer = &FakeResource_Spec{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (fakeResourceSpec *FakeResource_Spec) ConvertToArm(owningName string) (interface{}, error) {
	if fakeResourceSpec == nil {
		return nil, nil
	}
	result := FakeResource_SpecArm{}
	result.ApiVersion = fakeResourceSpec.ApiVersion
	result.Color = fakeResourceSpec.Color
	foo, err := fakeResourceSpec.Foo.ConvertToArm(owningName)
	if err != nil {
		return nil, err
	}
	result.Foo = foo.(FooArm)
	result.Name = genruntime.CreateArmResourceNameForDeployment(owningName, fakeResourceSpec.AzureName)
	if fakeResourceSpec.OptionalFoo != nil {
		optionalFoo, err := fakeResourceSpec.OptionalFoo.ConvertToArm(owningName)
		if err != nil {
			return nil, err
		}
		optionalFooTyped := optionalFoo.(FooArm)
		result.OptionalFoo = &optionalFooTyped
	}
	result.Type = FakeResourceSpecTypeMicrosoftAzureFakeResource
	return result, nil
}

// PopulateFromArm converts from an Azure ARM object to a Kubernetes CRD object
func (fakeResourceSpec *FakeResource_Spec) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_SpecArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for FromArm function. Expected FakeResource_SpecArm, got %T", armInput)
	}
	fakeResourceSpec.ApiVersion = typedInput.ApiVersion
	fakeResourceSpec.AzureName = genruntime.ExtractKubernetesResourceNameFromArmName(typedInput.Name)
	fakeResourceSpec.Color = typedInput.Color
	var err error
	foo := Foo{}
	err = foo.PopulateFromArm(owner, typedInput.Foo)
	if err != nil {
		return err
	}
	fakeResourceSpec.Foo = foo
	if typedInput.OptionalFoo != nil {
		optionalFoo := Foo{}
		err = optionalFoo.PopulateFromArm(owner, typedInput.OptionalFoo)
		if err != nil {
			return err
		}
		fakeResourceSpec.OptionalFoo = &optionalFoo
	}
	fakeResourceSpec.Owner = owner
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type FooArm struct {
	Name *string `json:"name,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo struct {
	Name *string `json:"name,omitempty"`
}

var _ genruntime.ArmTransformer = &Foo{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (foo *Foo) ConvertToArm(owningName string) (interface{}, error) {
	if foo == nil {
		return nil, nil
	}
	result := FooArm{}
	result.Name = foo.Name
	return result, nil
}

// PopulateFromArm converts from an Azure ARM object to a Kubernetes CRD object
func (foo *Foo) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FooArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for FromArm function. Expected FooArm, got %T", armInput)
	}
	foo.Name = typedInput.Name
	return nil
}
func init() {
	SchemeBuilder.Register(&FakeResource{}, &FakeResourceList{})
}
