// Code generated by k8s-infra. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20200101

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"fmt"
	"github.com/Azure/k8s-infra/hack/generated/pkg/genruntime"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/AResource
type AResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AResource_Spec `json:"spec,omitempty"`
}

// +kubebuilder:webhook:path=/mutate-test-infra-azure-com-v20200101-aresource,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.infra.azure.com,resources=aresource,verbs=create;update,versions=v20200101,name=default.aresource.test.infra.azure.com

var _ admission.Defaulter = &AResource{}

// Default defaults the Azure name of the resource to the Kubernetes name
func (aResource *AResource) Default() {
	if aResource.Spec.AzureName == "" {
		aResource.Spec.AzureName = aResource.Name
	}
}

var _ genruntime.KubernetesResource = &AResource{}

// AzureName returns the Azure name of the resource (string representation of github.com/Azure/k8s-infra/hack/generated/apis/test/v20200101/AResourceSpecName)
func (aResource *AResource) AzureName() string {
	return string(aResource.Spec.AzureName)
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (aResource *AResource) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(aResource.Spec)
	return &genruntime.ResourceReference{Name: aResource.Spec.Owner.Name, Group: group, Kind: kind}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/AResource
type AResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AResource `json:"items"`
}

type AResource_SpecArm struct {
	// +kubebuilder:validation:Required
	ApiVersion AResourceSpecApiVersion `json:"apiVersion"`
	// +kubebuilder:validation:Required
	Name string `json:"name"`
	// +kubebuilder:validation:Required
	Type AResourceSpecType `json:"type"`
}

var _ genruntime.ArmResourceSpec = &AResource_SpecArm{}

// GetApiVersion returns the ApiVersion of the resource
func (aResourceSpecArm AResource_SpecArm) GetApiVersion() string {
	return string(aResourceSpecArm.ApiVersion)
}

// GetName returns the Name of the resource
func (aResourceSpecArm AResource_SpecArm) GetName() string {
	return aResourceSpecArm.Name
}

// GetType returns the Type of the resource
func (aResourceSpecArm AResource_SpecArm) GetType() string {
	return string(aResourceSpecArm.Type)
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type AResourceSpecApiVersion string

const AResourceSpecApiVersion20200601 = AResourceSpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/AResource"}
type AResourceSpecType string

const AResourceSpecTypeMicrosoftAzureAResource = AResourceSpecType("Microsoft.Azure/AResource")

type AResource_Spec struct {
	// +kubebuilder:validation:Required
	ApiVersion AResourceSpecApiVersion `json:"apiVersion"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName AResourceSpecName `json:"azureName"`
	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources.infra.azure.com" json:"owner" kind:"ResourceGroup"`
}

var _ genruntime.ArmTransformer = &AResource_Spec{}

// ConvertToArm converts from a Kubernetes CRD object to an ARM object
func (aResourceSpec *AResource_Spec) ConvertToArm(name string) (interface{}, error) {
	if aResourceSpec == nil {
		return nil, nil
	}
	var result AResource_SpecArm
	result.ApiVersion = aResourceSpec.ApiVersion
	result.Name = name
	result.Type = AResourceSpecTypeMicrosoftAzureAResource
	return result, nil
}

// CreateEmptyArmValue returns an empty ARM value suitable for deserializing into
func (aResourceSpec *AResource_Spec) CreateEmptyArmValue() interface{} {
	return AResource_SpecArm{}
}

// PopulateFromArm populates a Kubernetes CRD object from an Azure ARM object
func (aResourceSpec *AResource_Spec) PopulateFromArm(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(AResource_SpecArm)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromArm() function. Expected AResource_SpecArm, got %T", armInput)
	}
	aResourceSpec.ApiVersion = typedInput.ApiVersion
	aResourceSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromArmName(typedInput.Name))
	aResourceSpec.Owner = owner
	return nil
}

// SetAzureName sets the Azure name from the given github.com/Azure/k8s-infra/hack/generated/apis/test/v20200101/AResourceSpecName value
func (aResourceSpec *AResource_Spec) SetAzureName(azureName string) {
	aResourceSpec.AzureName = AResourceSpecName(azureName)
}

// +kubebuilder:validation:Enum={"one","three","two"}
type AResourceSpecName string

const (
	AResourceSpecNameOne   = AResourceSpecName("one")
	AResourceSpecNameThree = AResourceSpecName("three")
	AResourceSpecNameTwo   = AResourceSpecName("two")
)

func init() {
	SchemeBuilder.Register(&AResource{}, &AResourceList{})
}
