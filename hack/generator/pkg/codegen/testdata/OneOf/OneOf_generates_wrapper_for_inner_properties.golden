// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200101

import "encoding/json"

//Generated from: https://test.test/schemas/2020-01-01/test.json
type Test struct {
	MyBool     *bool            `json:"myBool"`
	MyString   *string          `json:"myString"`
	Properties *Test_Properties `json:"properties"`
}

type Test_Properties struct {

	//Bar: mutually exclusive with all other properties
	Bar *Bar `json:"bar"`

	//Foo: mutually exclusive with all other properties
	Foo *Foo `json:"foo"`
}

// MarshalJSON defers JSON marshaling to the first non-nil property, because Test_Properties represents a discriminated union (JSON OneOf)
func (testProperties Test_Properties) MarshalJSON() ([]byte, error) {
	if testProperties.Bar != nil {
		return json.Marshal(testProperties.Bar)
	}
	if testProperties.Foo != nil {
		return json.Marshal(testProperties.Foo)
	}
	return nil, nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Bar
type Bar struct {

	// +kubebuilder:validation:Required
	Size int `json:"size"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo struct {
	Name *string `json:"name"`
}
